{"version":3,"file":"component---src-pages-using-typescript-tsx-f4791a945f243eb873fe.js","mappings":"mJA4HA,IAnFY,SAAC,GAAkD,IAAD,MAA/CA,EAA+C,EAA/CA,YAAaC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,MAC5BC,GAASC,EAAAA,EAAAA,gBAAc,cAAvBD,KAgBFE,EAAkBN,GAAeI,EAAKG,aAAaP,YACnDQ,EAAY,UAAGJ,EAAKG,oBAAR,aAAG,EAAmBJ,MAElCM,EAGA,CACF,CACIC,KAAK,cACLC,QAASL,GAEb,CACIM,SAAS,WACTD,QAASR,GAEb,CACIS,SAAS,iBACTD,QAASL,GAEb,CACIM,SAAS,UACTD,QAAQ,WAEZ,CACID,KAAK,eACLC,QAAQ,WAEZ,CACID,KAAK,kBACLC,SAAS,UAAAP,EAAKG,oBAAL,mBAAmBM,cAAnB,eAA2BC,UAA3B,IAEb,CACIJ,KAAK,gBACLC,QAASR,GAEb,CACIO,KAAK,sBACLC,QAASL,IAIjB,OACI,gBAAC,IAAD,CACIS,eAAgB,CACZd,KAAMA,MAAAA,EAAAA,EAAQ,MAElBE,MAAOA,EACPa,cAAeR,EAAY,QAAWA,EAAiB,GACvDN,KAAI,UAAMO,GAAN,OAA8BP,MAAAA,EAAAA,EAAQ,S,wEC7DtD,UAhCwD,SAAC,GAAD,IACtDe,EADsD,EACtDA,KACAC,EAFsD,EAEtDA,KACAC,EAHsD,EAGtDA,SAHsD,OAKtD,gBAAC,IAAD,CAAQhB,MAAM,mBAAmBgB,SAAUA,GACzC,gBAAC,IAAD,CAAKhB,MAAM,qBACX,oEACA,qEAC2C,sCAD3C,+DAE8C,yCAF9C,wEAKA,qEAC2C,wCAD3C,oBAEM,wCAFN,gBAEsC,sCAFtC,UAIA,2DACiCe,EADjC,uBAC2D,IACxDD,EAAKb,KAAKgB,UAFb,KAIA,2DACkC,IAChC,qBAAGC,KAAK,6CAAR,kCAFF,KAOA,gBAAC,EAAAC,KAAD,CAAMC,GAAG,KAAT","sources":["webpack://bbon.me/./src/components/seo.tsx","webpack://bbon.me/./src/pages/using-typescript.tsx"],"sourcesContent":["/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from 'react';\n// import PropTypes from \"prop-types\";\nimport { Helmet } from 'react-helmet';\nimport { useStaticQuery, graphql } from 'gatsby';\n\ntype Meta = {\n    property?: string;\n    name?: string;\n    content?: unknown;\n};\n\ninterface SeoProps {\n    description?: string;\n    lang?: string;\n    meta?: React.DetailedHTMLProps<\n        React.MetaHTMLAttributes<HTMLMetaElement>,\n        HTMLMetaElement\n    >[];\n    title: string;\n}\n\ninterface Social {\n    twitter?: string;\n}\n\ninterface SiteMetadata {\n    title: string;\n    description?: string;\n    social?: Social;\n}\ninterface Site {\n    siteMetadata: SiteMetadata;\n}\n\nconst Seo = ({ description, lang, meta, title }: SeoProps) => {\n    const { site } = useStaticQuery<{ site: Site }>(\n        graphql`\n            query {\n                site {\n                    siteMetadata {\n                        title\n                        description\n                        social {\n                            twitter\n                        }\n                    }\n                }\n            }\n        `\n    );\n\n    const metaDescription = description || site.siteMetadata.description;\n    const defaultTitle = site.siteMetadata?.title;\n\n    const metaElementRecords: React.DetailedHTMLProps<\n        React.MetaHTMLAttributes<HTMLMetaElement>,\n        HTMLMetaElement\n    >[] = [\n        {\n            name: `description`,\n            content: metaDescription,\n        },\n        {\n            property: `og:title`,\n            content: title,\n        },\n        {\n            property: `og:description`,\n            content: metaDescription,\n        },\n        {\n            property: `og:type`,\n            content: `website`,\n        },\n        {\n            name: `twitter:card`,\n            content: `summary`,\n        },\n        {\n            name: `twitter:creator`,\n            content: site.siteMetadata?.social?.twitter || ``,\n        },\n        {\n            name: `twitter:title`,\n            content: title,\n        },\n        {\n            name: `twitter:description`,\n            content: metaDescription,\n        },\n    ];\n\n    return (\n        <Helmet\n            htmlAttributes={{\n                lang: lang ?? 'en',\n            }}\n            title={title}\n            titleTemplate={defaultTitle ? `%s | ${defaultTitle}` : ''}\n            meta={[...metaElementRecords, ...(meta ?? [])]}\n        />\n    );\n};\n\n// Seo.defaultProps = {\n//   lang: `en`,\n//   meta: [],\n//   description: ``,\n// };\n\n// Seo.propTypes = {\n//   description: PropTypes.string,\n//   lang: PropTypes.string,\n//   meta: PropTypes.arrayOf(PropTypes.object),\n//   title: PropTypes.string.isRequired,\n// };\n\nexport default Seo;\n","// If you don't want to use TypeScript you can delete this file!\nimport * as React from \"react\";\nimport { PageProps, Link, graphql } from \"gatsby\";\n\nimport Layout from \"../components/layout\";\nimport Seo from \"../components/seo\";\n\ntype DataProps = {\n  site: {\n    buildTime: string;\n  };\n};\n\nconst UsingTypescript: React.FC<PageProps<DataProps>> = ({\n  data,\n  path,\n  location,\n}) => (\n  <Layout title=\"Using TypeScript\" location={location}>\n    <Seo title=\"Using TypeScript\" />\n    <h1>Gatsby supports TypeScript by default!</h1>\n    <p>\n      This means that you can create and write <em>.ts/.tsx</em> files for your\n      pages, components etc. Please note that the <em>gatsby-*.js</em> files\n      (like gatsby-node.js) currently don't support TypeScript yet.\n    </p>\n    <p>\n      For type checking you'll want to install <em>typescript</em> via npm and\n      run <em>tsc --init</em> to create a <em>tsconfig</em> file.\n    </p>\n    <p>\n      You're currently on the page \"{path}\" which was built on{\" \"}\n      {data.site.buildTime}.\n    </p>\n    <p>\n      To learn more, head over to our{\" \"}\n      <a href=\"https://www.gatsbyjs.com/docs/typescript/\">\n        documentation about TypeScript\n      </a>\n      .\n    </p>\n    <Link to=\"/\">Go back to the homepage</Link>\n  </Layout>\n);\n\nexport default UsingTypescript;\n\nexport const query = graphql`\n  {\n    site {\n      buildTime(formatString: \"YYYY-MM-DD hh:mm a z\")\n    }\n  }\n`;\n"],"names":["description","lang","meta","title","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","metaElementRecords","name","content","property","social","twitter","htmlAttributes","titleTemplate","data","path","location","buildTime","href","Link","to"],"sourceRoot":""}