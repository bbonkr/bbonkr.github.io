{"version":3,"file":"component---src-templates-blog-list-tsx-6aab7dca5cd7bd24b20f.js","mappings":"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","sources":["webpack://bbon.me/./src/components/social-links/index.tsx","webpack://bbon.me/./src/components/bio.tsx","webpack://bbon.me/./src/hooks/queries/useSiteQuery.ts","webpack://bbon.me/./src/components/categories/category-list.tsx","webpack://bbon.me/./src/components/categories/simple-category-list.tsx","webpack://bbon.me/./src/components/hr.tsx","webpack://bbon.me/./src/components/pagination/page-nav.tsx","webpack://bbon.me/./src/components/post-list-item.tsx","webpack://bbon.me/./src/templates/blog-list.tsx"],"sourcesContent":["import * as React from 'react';\nimport { FaFacebook, FaGithub, FaLinkedin, FaTwitter } from 'react-icons/fa';\nimport { Social } from '../../models/data';\n\nimport './style.css';\n\ninterface SocialLinksProps {\n    social: Social;\n    openNewWindow?: boolean;\n}\n\nconst SocialLinks = ({ social, openNewWindow }: SocialLinksProps) => {\n    const anchroTarget = openNewWindow ? '_blank' : '_self';\n    const anchorRel = `noreferrer ${openNewWindow ? 'external' : ''}`;\n    return (\n        <ul className=\"social-list\">\n            {social?.github && (\n                <li>\n                    <a\n                        href={`https://github.com/${social?.github || ``}`}\n                        target={anchroTarget}\n                        rel={anchorRel}\n                    >\n                        <FaGithub size={`1.3rem`} />\n                    </a>\n                </li>\n            )}\n            {social?.twitter && (\n                <li>\n                    <a\n                        href={`https://twitter.com/${social?.twitter || ``}`}\n                        target={anchroTarget}\n                        rel={anchorRel}\n                    >\n                        <FaTwitter size={'1.3rem'} />\n                    </a>\n                </li>\n            )}\n            {social?.facebook && (\n                <li>\n                    <a\n                        href={`https://www.facebook.com/${\n                            social?.facebook || ``\n                        }`}\n                        target={anchroTarget}\n                        rel={anchorRel}\n                    >\n                        <FaFacebook size={`1.3rem`} />\n                    </a>\n                </li>\n            )}\n            {social?.linkedin && (\n                <li>\n                    <a\n                        href={`https://www.linkedin.com/in/${\n                            social?.linkedin || ``\n                        }/`}\n                        target={anchroTarget}\n                        rel={anchorRel}\n                    >\n                        <FaLinkedin size={`1.3rem`} />\n                    </a>\n                </li>\n            )}\n        </ul>\n    );\n};\n\nexport default SocialLinks;\n","/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from 'react';\nimport { StaticImage } from 'gatsby-plugin-image';\nimport { FaTwitter } from 'react-icons/fa';\nimport { useSiteQuery } from '../hooks/queries/useSiteQuery';\nimport SocialLinks from './social-links';\n\nconst Bio = () => {\n    const { site } = useSiteQuery();\n\n    // Set these values by editing \"siteMetadata\" in gatsby-config.js\n    const author = site.siteMetadata?.author;\n    const social = site.siteMetadata?.social;\n\n    return (\n        <div id=\"bio\" className=\"flex w-full items-center font-sans px-4 py-12\">\n            <StaticImage\n                className=\"w-10 h-10 rounded-full mr-4\"\n                layout=\"fixed\"\n                formats={['auto', 'webp', 'avif']}\n                src=\"../images/me.png\"\n                width={50}\n                height={50}\n                quality={95}\n                alt=\"Profile picture\"\n            />\n            {author?.name && (\n                <div className=\"flex-1 px-2\">\n                    <p className=\"text-base font-bold md:text-xl leading-none mb-1\">\n                        {author.name}\n                    </p>\n                    {author?.summary && (\n                        <p className=\"text-gray-600 dark:text-gray-400 text-xs md:text-base mb-1\">\n                            {author?.summary}\n                        </p>\n                    )}\n                    {social && (\n                        <div className=\"justify-end\">\n                            <SocialLinks social={social} />\n                        </div>\n                    )}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default Bio;\n","import { useStaticQuery, graphql } from 'gatsby';\nimport { Site } from '../../models/data';\n\nexport const useSiteQuery = () => {\n    const data = useStaticQuery<{ site: Site }>(graphql`\n        query BioQuery {\n            site {\n                siteMetadata {\n                    title\n                    author {\n                        name\n                        summary\n                    }\n                    social {\n                        twitter\n                        github\n                        linkedin\n                        facebook\n                    }\n                }\n            }\n        }\n    `);\n\n    return {\n        ...data,\n    };\n};\n","import * as React from 'react';\nimport { Tag } from '../../models/data';\n\n// import './tag-list.css';\n\ninterface CategoryListProps {\n    categories?: Tag[];\n    selectedCategory?: string;\n    onChange?: (category: string) => void;\n}\n\nexport const CategoryList = ({\n    categories,\n    selectedCategory,\n    onChange,\n}: CategoryListProps) => {\n    const handleClickTag = (tag: string) => () => {\n        if (onChange) {\n            onChange(tag);\n        }\n    };\n\n    return (\n        <ul className=\"flex flex-row flex-wrap break-words gap-3 px-4 py-3\">\n            {categories?.map((category) => (\n                <li\n                    key={category.fieldValue}\n                    className={`cursor-pointer text-green-600 dark:text-green-600  p-2 ${\n                        selectedCategory === category.fieldValue\n                            ? 'cursor-not-allowed border-green-600 border-b-2'\n                            : ''\n                    }`}\n                    onClick={handleClickTag(category.fieldValue)}\n                >\n                    {category.fieldValue} ({category.totalCount})\n                </li>\n            ))}\n        </ul>\n    );\n};\n","import { Link } from 'gatsby';\nimport * as React from 'react';\nimport kebabCase from 'lodash/kebabCase';\n\ninterface SimpleCategoryListProps {\n    categories?: string[];\n}\n\nexport const SimpleCategoryList = ({ categories }: SimpleCategoryListProps) => {\n    return (\n        <ul className=\"list-style-none flex gap-3 flex-wrap break-words\">\n            {categories?.map((category) => {\n                return (\n                    <li key={category}>\n                        <Link\n                            to={`/categories/${kebabCase(category)}`}\n                            className=\"text-base md:text-sm text-green-500 no-underline hover:underline\"\n                        >\n                            {category}\n                        </Link>\n                    </li>\n                );\n            })}\n        </ul>\n    );\n};\n","import * as React from 'react';\n\nexport const Hr = () => {\n    return <hr className=\"border-b-2 border-gray-400 my-8\" />;\n};\n","import * as React from 'react';\nimport { Link, navigate } from 'gatsby';\n\ninterface PageNavProp {\n    showDescription?: boolean;\n    useShortcut?: boolean;\n    current: number;\n    total: number;\n    path: string;\n}\n\nexport const PageNav = ({\n    current,\n    total,\n    path,\n    showDescription,\n    useShortcut,\n}: PageNavProp) => {\n    const [selectedPage, setSelectedPage] = React.useState<string>(\n        `${current}`\n    );\n\n    const handleChange = (\n        event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>\n    ) => {\n        const value = event.target.value;\n\n        setSelectedPage((_) => value);\n    };\n\n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n\n        if (selectedPage && selectedPage !== `${current}`) {\n            navigate(\n                `${path}${selectedPage === '1' ? '' : `/${selectedPage}`}`\n            );\n        }\n    };\n\n    return (\n        <nav>\n            <div className=\"font-sans container max-w-4xl mx-auto flex flex-col justify-center items-center\">\n                <div className=\"w-full mx-auto flex flex-wrap\">\n                    <div className=\"flex-start text-left md:w-1/2 flex-1\">\n                        {current > 1 && (\n                            <React.Fragment>\n                                <span className=\"text-xs md:text-sm font-normal text-gray-600\">\n                                    &lt; Previous Page\n                                </span>\n\n                                <Link\n                                    to={`${path}${\n                                        current - 1 < 2 ? '' : `/${current - 1}`\n                                    }`}\n                                    rel=\"prev\"\n                                    className=\"break-normal text-base md:text-sm text-green-500 font-bold no-underline hover:underline\"\n                                >\n                                    <br />\n                                    {`Previous Page`}\n                                </Link>\n                            </React.Fragment>\n                        )}\n                    </div>\n                    <div className=\"flex-end text-right md:w-1/2 flex-1\">\n                        {current < total && (\n                            <React.Fragment>\n                                <span className=\"text-xs md:text-sm font-normal text-gray-600\">\n                                    Next Page &gt;\n                                </span>\n                                <br />\n                                <Link\n                                    to={`${path}/${current + 1}`}\n                                    rel=\"next\"\n                                    className=\"break-normal text-base md:text-sm text-green-500 font-bold no-underline hover:underline\"\n                                >\n                                    {`Next Page`}\n                                </Link>\n                            </React.Fragment>\n                        )}\n                    </div>\n                </div>\n\n                <div className=\"flex-1 flex justify-center items-center w-full gap-3 my-6 flex-wrap\">\n                    {showDescription && (\n                        <div className=\"\">\n                            <h2 className=\"flex gap-2 text-sm\">\n                                <span>{`Posts on`}</span>\n                                <span className=\"text-green-500\">{`${current}`}</span>\n                                <span>of</span>\n                                <span>{`${total} page${\n                                    total > 1 ? 's' : ''\n                                }`}</span>\n                            </h2>\n                        </div>\n                    )}\n                    {useShortcut && (\n                        <form onSubmit={handleSubmit} className=\"flex gap-1\">\n                            <select\n                                className=\"rounded-md shadow-sm border-green-600 focus:border-green-300 focus:ring focus:ring-green-200 focus:ring-opacity-50\"\n                                onChange={handleChange}\n                                value={selectedPage}\n                            >\n                                {Array.from({ length: total }).map(\n                                    (_, index) => (\n                                        <option\n                                            key={index + 1}\n                                            value={index + 1}\n                                        >\n                                            {index + 1}\n                                        </option>\n                                    )\n                                )}\n                            </select>\n                            <button\n                                type=\"submit\"\n                                className=\"button bg-green-600 text-gray-100 focus:ring focus:ring-green-200 focus:ring-opacity-50\"\n                            >\n                                Go\n                            </button>\n                        </form>\n                    )}\n                </div>\n            </div>\n        </nav>\n    );\n};\n","import { Link } from 'gatsby';\nimport * as React from 'react';\nimport { Post } from '../models/data';\nimport { SimpleTagList } from './tags';\nimport { SimpleCategoryList } from './categories';\n\nimport '../components/tags/tag-list.css';\n\ninterface PostListItemProps {\n    post: Post;\n}\n\nconst PostListItem = ({ post }: PostListItemProps) => {\n    return (\n        <article\n            className=\"post-list-item py-6\"\n            itemScope\n            itemType=\"http://schema.org/Article\"\n        >\n            <header className=\"pt-6\">\n                <aside>\n                    {post.node.frontmatter.categories && (\n                        <SimpleCategoryList\n                            categories={post.node.frontmatter.categories}\n                        />\n                    )}\n                </aside>\n                <h2 className=\"font-bold font-sans break-words text-gray-900 dark:text-gray-100 pb-2 text-3xl md:text-4xl\">\n                    <Link to={post.node.fields.slug} itemProp=\"url\">\n                        <span itemProp=\"headline\">\n                            {post.node.frontmatter.title}\n                        </span>\n                    </Link>\n                </h2>\n                <small className=\"text-sm md:text-base font-normal text-gray-600 dark:text-gray-400\">\n                    {post.node.frontmatter.date}\n                </small>\n            </header>\n            <section className=\"article-body mt-1 break-words\">\n                <p\n                    dangerouslySetInnerHTML={{\n                        __html:\n                            (post.node.frontmatter.description ||\n                                post.node.excerpt) ??\n                            '',\n                    }}\n                    itemProp=\"description\"\n                />\n            </section>\n\n            <footer>\n                <aside className=\"text-base md:text-sm text-gray-500 flex flex-row\">\n                    <SimpleTagList tags={post.node.frontmatter.tags} />\n                </aside>\n            </footer>\n        </article>\n    );\n};\n\nexport default PostListItem;\n","import { graphql, Link, PageProps } from 'gatsby';\nimport * as React from 'react';\nimport Bio from '../components/bio';\nimport { Hr } from '../components/hr';\nimport Layout from '../components/layout';\nimport { PageNav } from '../components/pagination/page-nav';\nimport PostListItem from '../components/post-list-item';\nimport Seo from '../components/seo';\nimport { Site, MarkdownRemarks } from '../models/data';\n\ninterface BlogListTemplatePageContext {\n    limit: number;\n    skip: number;\n    totalPages: number;\n    currentPage: number;\n    basePath: string;\n}\n\ninterface Data {\n    allMarkdownRemark: MarkdownRemarks;\n    site: Site;\n}\n\nconst BlogListTemplate = ({\n    data,\n    pageContext,\n    location,\n}: PageProps<Data, BlogListTemplatePageContext>) => {\n    const {\n        site: { siteMetadata },\n        allMarkdownRemark: { edges },\n    } = data;\n    return (\n        <Layout location={location} title={siteMetadata?.title ?? ''}>\n            <Seo\n                title={`Posts on ${pageContext.currentPage} of ${\n                    pageContext.totalPages\n                } page${pageContext.totalPages > 1 ? 's' : ''}`}\n            />\n\n            <Bio />\n            {/* <header>\n                <aside className=\"flex gap-2\">\n                    <span>{`Posts on`}</span>\n                    <span className=\"text-green-500\">{`${pageContext.currentPage}`}</span>\n                    <span>of</span>\n                    <span>{`${pageContext.totalPages} page${\n                        pageContext.totalPages > 1 ? 's' : ''\n                    }`}</span>\n                </aside>\n                <h1 className=\"flex gap-2\"></h1>\n            </header> */}\n\n            <main>\n                {edges?.map((edge) => {\n                    return (\n                        <PostListItem key={edge.node.fields.slug} post={edge} />\n                    );\n                })}\n            </main>\n\n            <Hr />\n\n            <footer>\n                <PageNav\n                    current={pageContext.currentPage}\n                    total={pageContext.totalPages}\n                    path={pageContext.basePath}\n                    showDescription\n                    useShortcut\n                />\n            </footer>\n        </Layout>\n    );\n};\n\nexport default BlogListTemplate;\n\nexport const blogListQuery = graphql`\n    query blogListQuery($skip: Int!, $limit: Int!) {\n        site {\n            siteMetadata {\n                title\n            }\n        }\n        allMarkdownRemark(\n            sort: { fields: [frontmatter___date], order: DESC }\n            limit: $limit\n            skip: $skip\n        ) {\n            edges {\n                node {\n                    excerpt(format: PLAIN)\n                    fields {\n                        slug\n                    }\n                    frontmatter {\n                        date(formatString: \"MMMM DD, YYYY\")\n                        title\n                        tags\n                        categories\n                        image\n                        draft\n                        comments\n                    }\n                }\n            }\n        }\n    }\n`;\n"],"names":["social","openNewWindow","anchroTarget","anchorRel","className","github","href","target","rel","size","twitter","facebook","linkedin","data","site","useStaticQuery","author","siteMetadata","id","S","layout","formats","src","width","height","quality","alt","name","summary","CategoryList","categories","selectedCategory","onChange","map","category","key","fieldValue","onClick","tag","totalCount","SimpleCategoryList","Link","to","kebabCase","Hr","PageNav","current","total","path","showDescription","useShortcut","React","selectedPage","setSelectedPage","onSubmit","event","preventDefault","navigate","value","_","Array","from","length","index","type","post","itemScope","itemType","node","frontmatter","fields","slug","itemProp","title","date","dangerouslySetInnerHTML","__html","description","excerpt","tags","pageContext","location","edges","allMarkdownRemark","currentPage","totalPages","edge","basePath"],"sourceRoot":""}