{"version":3,"file":"component---src-templates-categories-tsx-60f1f9fb3c7db1f12b06.js","mappings":"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","sources":["webpack://bbon.me/./src/components/categories/category-list.tsx","webpack://bbon.me/./src/components/categories/simple-category-list.tsx","webpack://bbon.me/./src/components/hr.tsx","webpack://bbon.me/./src/components/pagination/page-nav.tsx","webpack://bbon.me/./src/components/post-list-item.tsx","webpack://bbon.me/./src/templates/categories.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Tag } from '../../models/data';\n\n// import './tag-list.css';\n\ninterface CategoryListProps {\n    categories?: Tag[];\n    selectedCategory?: string;\n    onChange?: (category: string) => void;\n}\n\nexport const CategoryList = ({\n    categories,\n    selectedCategory,\n    onChange,\n}: CategoryListProps) => {\n    const handleClickTag = (tag: string) => () => {\n        if (onChange) {\n            onChange(tag);\n        }\n    };\n\n    return (\n        <ul className=\"flex flex-row flex-wrap break-words gap-3 px-4 py-3\">\n            {categories?.map((category) => (\n                <li\n                    key={category.fieldValue}\n                    className={`cursor-pointer text-green-600 dark:text-green-600  p-2 ${\n                        selectedCategory === category.fieldValue\n                            ? 'cursor-not-allowed border-green-600 border-b-2'\n                            : ''\n                    }`}\n                    onClick={handleClickTag(category.fieldValue)}\n                >\n                    {category.fieldValue} ({category.totalCount})\n                </li>\n            ))}\n        </ul>\n    );\n};\n","import { Link } from 'gatsby';\nimport * as React from 'react';\nimport kebabCase from 'lodash/kebabCase';\n\ninterface SimpleCategoryListProps {\n    categories?: string[];\n}\n\nexport const SimpleCategoryList = ({ categories }: SimpleCategoryListProps) => {\n    return (\n        <ul className=\"list-style-none flex gap-3 flex-wrap break-words\">\n            {categories?.map((category) => {\n                return (\n                    <li key={category}>\n                        <Link\n                            to={`/categories/${kebabCase(category)}`}\n                            className=\"text-base md:text-sm text-green-500 no-underline hover:underline\"\n                        >\n                            {category}\n                        </Link>\n                    </li>\n                );\n            })}\n        </ul>\n    );\n};\n","import * as React from 'react';\n\nexport const Hr = () => {\n    return <hr className=\"border-b-2 border-gray-400 my-8\" />;\n};\n","import * as React from 'react';\nimport { Link, navigate } from 'gatsby';\n\ninterface PageNavProp {\n    showDescription?: boolean;\n    useShortcut?: boolean;\n    current: number;\n    total: number;\n    path: string;\n}\n\nexport const PageNav = ({\n    current,\n    total,\n    path,\n    showDescription,\n    useShortcut,\n}: PageNavProp) => {\n    const [selectedPage, setSelectedPage] = React.useState<string>(\n        `${current}`\n    );\n\n    const handleChange = (\n        event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>\n    ) => {\n        const value = event.target.value;\n\n        setSelectedPage((_) => value);\n    };\n\n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n\n        if (selectedPage && selectedPage !== `${current}`) {\n            navigate(\n                `${path}${selectedPage === '1' ? '' : `/${selectedPage}`}`\n            );\n        }\n    };\n\n    return (\n        <nav>\n            <div className=\"font-sans container max-w-4xl mx-auto flex flex-col justify-center items-center\">\n                <div className=\"w-full mx-auto flex flex-wrap\">\n                    <div className=\"flex-start text-left md:w-1/2 flex-1\">\n                        {current > 1 && (\n                            <React.Fragment>\n                                <span className=\"text-xs md:text-sm font-normal text-gray-600\">\n                                    &lt; Previous Page\n                                </span>\n\n                                <Link\n                                    to={`${path}${\n                                        current - 1 < 2 ? '' : `/${current - 1}`\n                                    }`}\n                                    rel=\"prev\"\n                                    className=\"break-normal text-base md:text-sm text-green-500 font-bold no-underline hover:underline\"\n                                >\n                                    <br />\n                                    {`Previous Page`}\n                                </Link>\n                            </React.Fragment>\n                        )}\n                    </div>\n                    <div className=\"flex-end text-right md:w-1/2 flex-1\">\n                        {current < total && (\n                            <React.Fragment>\n                                <span className=\"text-xs md:text-sm font-normal text-gray-600\">\n                                    Next Page &gt;\n                                </span>\n                                <br />\n                                <Link\n                                    to={`${path}/${current + 1}`}\n                                    rel=\"next\"\n                                    className=\"break-normal text-base md:text-sm text-green-500 font-bold no-underline hover:underline\"\n                                >\n                                    {`Next Page`}\n                                </Link>\n                            </React.Fragment>\n                        )}\n                    </div>\n                </div>\n\n                <div className=\"flex-1 flex justify-center items-center w-full gap-3 my-6 flex-wrap\">\n                    {showDescription && (\n                        <div className=\"\">\n                            <h2 className=\"flex gap-2 text-sm\">\n                                <span>{`Posts on`}</span>\n                                <span className=\"text-green-500\">{`${current}`}</span>\n                                <span>of</span>\n                                <span>{`${total} page${\n                                    total > 1 ? 's' : ''\n                                }`}</span>\n                            </h2>\n                        </div>\n                    )}\n                    {useShortcut && (\n                        <form onSubmit={handleSubmit} className=\"flex gap-1\">\n                            <select\n                                className=\"rounded-md shadow-sm border-green-600 focus:border-green-300 focus:ring focus:ring-green-200 focus:ring-opacity-50\"\n                                onChange={handleChange}\n                                value={selectedPage}\n                            >\n                                {Array.from({ length: total }).map(\n                                    (_, index) => (\n                                        <option\n                                            key={index + 1}\n                                            value={index + 1}\n                                        >\n                                            {index + 1}\n                                        </option>\n                                    )\n                                )}\n                            </select>\n                            <button\n                                type=\"submit\"\n                                className=\"button bg-green-600 text-gray-100 focus:ring focus:ring-green-200 focus:ring-opacity-50\"\n                            >\n                                Go\n                            </button>\n                        </form>\n                    )}\n                </div>\n            </div>\n        </nav>\n    );\n};\n","import { Link } from 'gatsby';\nimport * as React from 'react';\nimport { Post } from '../models/data';\nimport { SimpleTagList } from './tags';\nimport { SimpleCategoryList } from './categories';\n\nimport '../components/tags/tag-list.css';\n\ninterface PostListItemProps {\n    post: Post;\n}\n\nconst PostListItem = ({ post }: PostListItemProps) => {\n    return (\n        <article\n            className=\"post-list-item py-6\"\n            itemScope\n            itemType=\"http://schema.org/Article\"\n        >\n            <header className=\"pt-6\">\n                <aside>\n                    {post.node.frontmatter.categories && (\n                        <SimpleCategoryList\n                            categories={post.node.frontmatter.categories}\n                        />\n                    )}\n                </aside>\n                <h2 className=\"font-bold font-sans break-words text-gray-900 dark:text-gray-100 pb-2 text-3xl md:text-4xl\">\n                    <Link to={post.node.fields.slug} itemProp=\"url\">\n                        <span itemProp=\"headline\">\n                            {post.node.frontmatter.title}\n                        </span>\n                    </Link>\n                </h2>\n                <small className=\"text-sm md:text-base font-normal text-gray-600 dark:text-gray-400\">\n                    {post.node.frontmatter.date}\n                </small>\n            </header>\n            <section className=\"article-body mt-1 break-words\">\n                <p\n                    dangerouslySetInnerHTML={{\n                        __html:\n                            (post.node.frontmatter.description ||\n                                post.node.excerpt) ??\n                            '',\n                    }}\n                    itemProp=\"description\"\n                />\n            </section>\n\n            <footer>\n                <aside className=\"text-base md:text-sm text-gray-500 flex flex-row\">\n                    <SimpleTagList tags={post.node.frontmatter.tags} />\n                </aside>\n            </footer>\n        </article>\n    );\n};\n\nexport default PostListItem;\n","import * as React from 'react';\nimport { graphql, Link, PageProps } from 'gatsby';\nimport Layout from '../components/layout';\nimport Seo from '../components/seo';\nimport Bio from '../components/bio';\nimport { Edge, Post } from '../models/data';\nimport PostListItem from '../components/post-list-item';\nimport { Hr } from '../components/hr';\nimport { PageNav } from '../components/pagination/page-nav';\n\ninterface PageContext {\n    category: string;\n    limit: number;\n    skip: number;\n    totalPages: number;\n    currentPage: number;\n    basePath: string;\n}\n\ninterface SiteMetadata {\n    title: string;\n}\n\ninterface Site {\n    siteMetadata: SiteMetadata;\n}\n\ninterface Category {\n    fieldValue: string;\n    totalCount: number;\n    edges: Post[];\n}\n\ninterface MarkdownRemark {\n    // group: Category[];\n    edges: Edge[];\n}\n\ninterface Data {\n    allMarkdownRemark: MarkdownRemark;\n    site: Site;\n}\n\nconst CategoryPageTemplate = ({\n    location,\n    data,\n    pageContext,\n}: PageProps<Data, PageContext>) => {\n    const {\n        allMarkdownRemark: { edges },\n        site: {\n            siteMetadata: { title },\n        },\n    } = data;\n\n    return (\n        <Layout location={location} title={title}>\n            <Seo title={`Posts categorized by ${pageContext.category}`} />\n            {/* <Bio /> */}\n            <header>\n                <aside>\n                    <p className=\"text-base md:text-sm text-green-500 font-bold\">\n                        &lt;{' '}\n                        <Link\n                            to=\"/categories\"\n                            className=\"text-base md:text-sm text-green-500 font-bold no-underline hover:underline\"\n                        >\n                            BACK TO CATEGORIES\n                        </Link>\n                    </p>\n                </aside>\n                <h1>\n                    {`Posts categorized by`}{' '}\n                    <span className=\"text-green-500\">{`${pageContext.category}`}</span>{' '}\n                </h1>\n            </header>\n\n            <main>\n                {edges.map((edge) => {\n                    return (\n                        <PostListItem key={edge.node.fields.slug} post={edge} />\n                    );\n                })}\n            </main>\n            <Hr />\n\n            <footer>\n                <PageNav\n                    current={pageContext.currentPage}\n                    total={pageContext.totalPages}\n                    path={pageContext.basePath}\n                    showDescription\n                    useShortcut\n                />\n            </footer>\n        </Layout>\n    );\n};\n\nexport default CategoryPageTemplate;\n\nexport const pageQuery = graphql`\n    query postsByCategory($category: String, $skip: Int!, $limit: Int!) {\n        site {\n            siteMetadata {\n                title\n            }\n        }\n        allMarkdownRemark(\n            sort: { fields: [frontmatter___date], order: DESC }\n            filter: { frontmatter: { categories: { in: [$category] } } }\n            limit: $limit\n            skip: $skip\n        ) {\n            edges {\n                node {\n                    excerpt(format: PLAIN)\n                    fields {\n                        slug\n                    }\n                    frontmatter {\n                        date(formatString: \"MMMM DD, YYYY\")\n                        title\n                        tags\n                        categories\n                        image\n                        draft\n                        comments\n                    }\n                }\n            }\n        }\n    }\n`;\n"],"names":["CategoryList","categories","selectedCategory","onChange","className","map","category","key","fieldValue","onClick","tag","totalCount","SimpleCategoryList","Link","to","kebabCase","Hr","PageNav","current","total","path","showDescription","useShortcut","React","selectedPage","setSelectedPage","rel","onSubmit","event","preventDefault","navigate","value","target","_","Array","from","length","index","type","post","itemScope","itemType","node","frontmatter","fields","slug","itemProp","title","date","dangerouslySetInnerHTML","__html","description","excerpt","tags","location","data","pageContext","edges","allMarkdownRemark","site","siteMetadata","edge","currentPage","totalPages","basePath"],"sourceRoot":""}