{"version":3,"file":"component---src-pages-categories-index-tsx-5445b1c5252757ab92c5.js","mappings":"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","sources":["webpack://bbon.me/./src/components/social-links/index.tsx","webpack://bbon.me/./src/components/bio.tsx","webpack://bbon.me/./src/hooks/queries/useSiteQuery.ts","webpack://bbon.me/./src/components/categories/category-list.tsx","webpack://bbon.me/./src/components/categories/simple-category-list.tsx","webpack://bbon.me/./src/pages/categories/index.tsx"],"sourcesContent":["import * as React from 'react';\nimport { FaFacebook, FaGithub, FaLinkedin, FaTwitter } from 'react-icons/fa';\nimport { Social } from '../../models/data';\n\nimport './style.css';\n\ninterface SocialLinksProps {\n    social: Social;\n    openNewWindow?: boolean;\n}\n\nconst SocialLinks = ({ social, openNewWindow }: SocialLinksProps) => {\n    const anchroTarget = openNewWindow ? '_blank' : '_self';\n    const anchorRel = `noreferrer ${openNewWindow ? 'external' : ''}`;\n    return (\n        <ul className=\"social-list\">\n            {social?.github && (\n                <li>\n                    <a\n                        href={`https://github.com/${social?.github || ``}`}\n                        target={anchroTarget}\n                        rel={anchorRel}\n                    >\n                        <FaGithub size={`1.3rem`} />\n                    </a>\n                </li>\n            )}\n            {social?.twitter && (\n                <li>\n                    <a\n                        href={`https://twitter.com/${social?.twitter || ``}`}\n                        target={anchroTarget}\n                        rel={anchorRel}\n                    >\n                        <FaTwitter size={'1.3rem'} />\n                    </a>\n                </li>\n            )}\n            {social?.facebook && (\n                <li>\n                    <a\n                        href={`https://www.facebook.com/${\n                            social?.facebook || ``\n                        }`}\n                        target={anchroTarget}\n                        rel={anchorRel}\n                    >\n                        <FaFacebook size={`1.3rem`} />\n                    </a>\n                </li>\n            )}\n            {social?.linkedin && (\n                <li>\n                    <a\n                        href={`https://www.linkedin.com/in/${\n                            social?.linkedin || ``\n                        }/`}\n                        target={anchroTarget}\n                        rel={anchorRel}\n                    >\n                        <FaLinkedin size={`1.3rem`} />\n                    </a>\n                </li>\n            )}\n        </ul>\n    );\n};\n\nexport default SocialLinks;\n","/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from 'react';\nimport { StaticImage } from 'gatsby-plugin-image';\nimport { FaTwitter } from 'react-icons/fa';\nimport { useSiteQuery } from '../hooks/queries/useSiteQuery';\nimport SocialLinks from './social-links';\n\nconst Bio = () => {\n    const { site } = useSiteQuery();\n\n    // Set these values by editing \"siteMetadata\" in gatsby-config.js\n    const author = site.siteMetadata?.author;\n    const social = site.siteMetadata?.social;\n\n    return (\n        <div id=\"bio\" className=\"flex w-full items-center font-sans px-4 py-12\">\n            <StaticImage\n                className=\"w-10 h-10 rounded-full mr-4\"\n                layout=\"fixed\"\n                formats={['auto', 'webp', 'avif']}\n                src=\"../images/me.png\"\n                width={50}\n                height={50}\n                quality={95}\n                alt=\"Profile picture\"\n            />\n            {author?.name && (\n                <div className=\"flex-1 px-2\">\n                    <p className=\"text-base font-bold md:text-xl leading-none mb-1\">\n                        {author.name}\n                    </p>\n                    {author?.summary && (\n                        <p className=\"text-gray-600 dark:text-gray-400 text-xs md:text-base mb-1\">\n                            {author?.summary}\n                        </p>\n                    )}\n                    {social && (\n                        <div className=\"justify-end\">\n                            <SocialLinks social={social} />\n                        </div>\n                    )}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default Bio;\n","import { useStaticQuery, graphql } from 'gatsby';\nimport { Site } from '../../models/data';\n\nexport const useSiteQuery = () => {\n    const data = useStaticQuery<{ site: Site }>(graphql`\n        query BioQuery {\n            site {\n                siteMetadata {\n                    title\n                    author {\n                        name\n                        summary\n                    }\n                    social {\n                        twitter\n                        github\n                        linkedin\n                        facebook\n                    }\n                }\n            }\n        }\n    `);\n\n    return {\n        ...data,\n    };\n};\n","import * as React from 'react';\nimport { Tag } from '../../models/data';\n\n// import './tag-list.css';\n\ninterface CategoryListProps {\n    categories?: Tag[];\n    selectedCategory?: string;\n    onChange?: (category: string) => void;\n}\n\nexport const CategoryList = ({\n    categories,\n    selectedCategory,\n    onChange,\n}: CategoryListProps) => {\n    const handleClickTag = (tag: string) => () => {\n        if (onChange) {\n            onChange(tag);\n        }\n    };\n\n    return (\n        <ul className=\"flex flex-row flex-wrap break-words gap-3 px-4 py-3\">\n            {categories?.map((category) => (\n                <li\n                    key={category.fieldValue}\n                    className={`cursor-pointer text-green-600 dark:text-green-600  p-2 ${\n                        selectedCategory === category.fieldValue\n                            ? 'cursor-not-allowed border-green-600 border-b-2'\n                            : ''\n                    }`}\n                    onClick={handleClickTag(category.fieldValue)}\n                >\n                    {category.fieldValue} ({category.totalCount})\n                </li>\n            ))}\n        </ul>\n    );\n};\n","import { Link } from 'gatsby';\nimport * as React from 'react';\nimport kebabCase from 'lodash/kebabCase';\n\ninterface SimpleCategoryListProps {\n    categories?: string[];\n}\n\nexport const SimpleCategoryList = ({ categories }: SimpleCategoryListProps) => {\n    return (\n        <ul className=\"list-style-none flex gap-3 flex-wrap break-words\">\n            {categories?.map((category) => {\n                return (\n                    <li key={category}>\n                        <Link\n                            to={`/categories/${kebabCase(category)}`}\n                            className=\"text-base md:text-sm text-green-500 no-underline hover:underline\"\n                        >\n                            {category}\n                        </Link>\n                    </li>\n                );\n            })}\n        </ul>\n    );\n};\n","import * as React from 'react';\nimport kebabCase from 'lodash/kebabCase';\nimport { graphql, PageProps, navigate } from 'gatsby';\nimport Layout from '../../components/layout';\nimport Seo from '../../components/seo';\nimport Bio from '../../components/bio';\nimport { Category } from '../../models/data';\nimport { CategoryList } from '../../components/categories';\n\ninterface FormValues {\n    category?: string;\n}\n\ninterface FormState {\n    values?: FormValues;\n}\n\ninterface SiteMetadata {\n    title: string;\n}\n\ninterface Site {\n    siteMetadata: SiteMetadata;\n}\n\ninterface MarkdownRemark {\n    group: Category[];\n}\n\ninterface Data {\n    allMarkdownRemark: MarkdownRemark;\n    site: Site;\n}\n\nconst CategoriesPage = ({ location, data }: PageProps<Data>) => {\n    const [formState, setFormState] = React.useState<FormState>({ values: {} });\n\n    const {\n        allMarkdownRemark: { group },\n        site: {\n            siteMetadata: { title },\n        },\n    } = data;\n\n    const handleClickTag = (category: string) => {\n        navigate(`/categories/${kebabCase(category)}`);\n    };\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const value = event.target.value;\n        const name = event.target.name;\n\n        setFormState((prevState) => ({\n            ...(prevState ?? {}),\n            values: {\n                ...(prevState ?? {}).values,\n                [name]: value,\n            },\n        }));\n    };\n\n    return (\n        <Layout location={location} title={title}>\n            <Seo title=\"All categories\" />\n            <Bio />\n            <header>\n                <h1>Categories</h1>\n            </header>\n            <div>\n                <div className=\"w-full\">\n                    <label className=\"block\">\n                        <input\n                            type=\"text\"\n                            name=\"category\"\n                            className=\"mt-1 block w-full rounded-md shadow-sm border-green-600 focus:border-green-300 focus:ring focus:ring-green-200 focus:ring-opacity-50 dark:bg-gray-800\"\n                            onChange={handleChange}\n                            value={formState.values?.category ?? ''}\n                            placeholder=\"Filter\"\n                        />\n                    </label>\n                </div>\n\n                <CategoryList\n                    categories={group.filter((x) =>\n                        !formState.values || !formState.values?.category\n                            ? true\n                            : formState.values?.category\n                            ? x.fieldValue\n                                  .toLowerCase()\n                                  .startsWith(\n                                      formState.values?.category?.toLowerCase()\n                                  )\n                            : false\n                    )}\n                    onChange={handleClickTag}\n                />\n            </div>\n        </Layout>\n    );\n};\n\nexport default CategoriesPage;\n\nexport const pageQuery = graphql`\n    query {\n        site {\n            siteMetadata {\n                title\n            }\n        }\n        allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n            group(field: frontmatter___categories) {\n                fieldValue\n                totalCount\n                edges {\n                    node {\n                        excerpt(format: PLAIN)\n                        fields {\n                            slug\n                        }\n                        frontmatter {\n                            date(formatString: \"MMMM DD, YYYY\")\n                            title\n                            tags\n                            categories\n                        }\n                    }\n                }\n            }\n        }\n    }\n`;\n"],"names":["social","openNewWindow","anchroTarget","anchorRel","className","github","href","target","rel","size","twitter","facebook","linkedin","data","site","useStaticQuery","author","siteMetadata","id","S","layout","formats","src","width","height","quality","alt","name","summary","CategoryList","categories","selectedCategory","onChange","map","category","key","fieldValue","onClick","tag","totalCount","SimpleCategoryList","Link","to","kebabCase","location","React","values","formState","setFormState","group","allMarkdownRemark","title","type","event","value","prevState","placeholder","filter","x","toLowerCase","startsWith","navigate"],"sourceRoot":""}