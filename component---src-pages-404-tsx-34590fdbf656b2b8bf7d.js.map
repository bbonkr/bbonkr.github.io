{"version":3,"file":"component---src-pages-404-tsx-34590fdbf656b2b8bf7d.js","mappings":"mJA4HA,IAnFY,SAAC,GAAkD,IAAD,MAA/CA,EAA+C,EAA/CA,YAAaC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,MAC5BC,GAASC,EAAAA,EAAAA,gBAAc,cAAvBD,KAgBFE,EAAkBN,GAAeI,EAAKG,aAAaP,YACnDQ,EAAY,UAAGJ,EAAKG,oBAAR,aAAG,EAAmBJ,MAElCM,EAGA,CACF,CACIC,KAAK,cACLC,QAASL,GAEb,CACIM,SAAS,WACTD,QAASR,GAEb,CACIS,SAAS,iBACTD,QAASL,GAEb,CACIM,SAAS,UACTD,QAAQ,WAEZ,CACID,KAAK,eACLC,QAAQ,WAEZ,CACID,KAAK,kBACLC,SAAS,UAAAP,EAAKG,oBAAL,mBAAmBM,cAAnB,eAA2BC,UAA3B,IAEb,CACIJ,KAAK,gBACLC,QAASR,GAEb,CACIO,KAAK,sBACLC,QAASL,IAIjB,OACI,gBAAC,IAAD,CACIS,eAAgB,CACZd,KAAMA,MAAAA,EAAAA,EAAQ,MAElBE,MAAOA,EACPa,cAAeR,EAAY,QAAWA,EAAiB,GACvDN,KAAI,UAAMO,GAAN,OAA8BP,MAAAA,EAAAA,EAAQ,S,6DC1EtD,UAbqB,SAAC,GAA2C,IAAD,EAAxCe,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,SACpBf,EAAK,iBACLgB,EAAS,UAAGF,EAAKb,KAAKG,oBAAb,aAAG,EAAwBJ,MAE1C,OACI,gBAAC,IAAD,CAAQe,SAAUA,EAAUf,MAAOgB,MAAAA,EAAAA,EAAahB,GAC5C,gBAAC,IAAD,CAAKA,MAAOA,IACZ,4CACA","sources":["webpack://bbon.me/./src/components/seo.tsx","webpack://bbon.me/./src/pages/404.tsx"],"sourcesContent":["/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from 'react';\n// import PropTypes from \"prop-types\";\nimport { Helmet } from 'react-helmet';\nimport { useStaticQuery, graphql } from 'gatsby';\n\ntype Meta = {\n    property?: string;\n    name?: string;\n    content?: unknown;\n};\n\ninterface SeoProps {\n    description?: string;\n    lang?: string;\n    meta?: React.DetailedHTMLProps<\n        React.MetaHTMLAttributes<HTMLMetaElement>,\n        HTMLMetaElement\n    >[];\n    title: string;\n}\n\ninterface Social {\n    twitter?: string;\n}\n\ninterface SiteMetadata {\n    title: string;\n    description?: string;\n    social?: Social;\n}\ninterface Site {\n    siteMetadata: SiteMetadata;\n}\n\nconst Seo = ({ description, lang, meta, title }: SeoProps) => {\n    const { site } = useStaticQuery<{ site: Site }>(\n        graphql`\n            query {\n                site {\n                    siteMetadata {\n                        title\n                        description\n                        social {\n                            twitter\n                        }\n                    }\n                }\n            }\n        `\n    );\n\n    const metaDescription = description || site.siteMetadata.description;\n    const defaultTitle = site.siteMetadata?.title;\n\n    const metaElementRecords: React.DetailedHTMLProps<\n        React.MetaHTMLAttributes<HTMLMetaElement>,\n        HTMLMetaElement\n    >[] = [\n        {\n            name: `description`,\n            content: metaDescription,\n        },\n        {\n            property: `og:title`,\n            content: title,\n        },\n        {\n            property: `og:description`,\n            content: metaDescription,\n        },\n        {\n            property: `og:type`,\n            content: `website`,\n        },\n        {\n            name: `twitter:card`,\n            content: `summary`,\n        },\n        {\n            name: `twitter:creator`,\n            content: site.siteMetadata?.social?.twitter || ``,\n        },\n        {\n            name: `twitter:title`,\n            content: title,\n        },\n        {\n            name: `twitter:description`,\n            content: metaDescription,\n        },\n    ];\n\n    return (\n        <Helmet\n            htmlAttributes={{\n                lang: lang ?? 'en',\n            }}\n            title={title}\n            titleTemplate={defaultTitle ? `%s | ${defaultTitle}` : ''}\n            meta={[...metaElementRecords, ...(meta ?? [])]}\n        />\n    );\n};\n\n// Seo.defaultProps = {\n//   lang: `en`,\n//   meta: [],\n//   description: ``,\n// };\n\n// Seo.propTypes = {\n//   description: PropTypes.string,\n//   lang: PropTypes.string,\n//   meta: PropTypes.arrayOf(PropTypes.object),\n//   title: PropTypes.string.isRequired,\n// };\n\nexport default Seo;\n","import * as React from 'react';\nimport { graphql, PageProps } from 'gatsby';\n\nimport Layout from '../components/layout';\nimport Seo from '../components/seo';\n\ninterface SiteMetadata {\n    title: string;\n}\ninterface Site {\n    siteMetadata: SiteMetadata;\n}\n\ninterface Data {\n    site: Site;\n}\n\ntype NotFoundPageProps = PageProps<Data>;\n\nconst NotFoundPage = ({ data, location }: NotFoundPageProps) => {\n    const title = `404: Not Found`;\n    const siteTitle = data.site.siteMetadata?.title;\n\n    return (\n        <Layout location={location} title={siteTitle ?? title}>\n            <Seo title={title} />\n            <h1>404: Not Found</h1>\n            <p>You just hit a route that doesn&#39;t exist... the sadness.</p>\n        </Layout>\n    );\n};\n\nexport default NotFoundPage;\n\nexport const pageQuery = graphql`\n    query {\n        site {\n            siteMetadata {\n                title\n            }\n        }\n    }\n`;\n"],"names":["description","lang","meta","title","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","metaElementRecords","name","content","property","social","twitter","htmlAttributes","titleTemplate","data","location","siteTitle"],"sourceRoot":""}