{"version":3,"file":"component---src-pages-search-tsx-8709f2f136f3e8cff31c.js","mappings":"kLAoEA,EAzDoB,SAAC,GAAgD,IAA9CA,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,cACrBC,EAAeD,EAAgB,SAAW,QAC1CE,EAAY,eAAcF,EAAgB,WAAa,IAC7D,OACI,sBAAIG,UAAU,gBACTJ,MAAAA,OAAA,EAAAA,EAAQK,SACL,0BACI,qBACIC,KAAI,wBAAwBN,MAAAA,OAAA,EAAAA,EAAQK,SAAR,IAC5BE,OAAQL,EACRM,IAAKL,GAEL,gBAAC,MAAD,CAAUM,KAAI,cAIzBT,MAAAA,OAAA,EAAAA,EAAQU,UACL,0BACI,qBACIJ,KAAI,yBAAyBN,MAAAA,OAAA,EAAAA,EAAQU,UAAR,IAC7BH,OAAQL,EACRM,IAAKL,GAEL,gBAAC,MAAD,CAAWM,KAAM,cAI5BT,MAAAA,OAAA,EAAAA,EAAQW,WACL,0BACI,qBACIL,KAAI,8BACAN,MAAAA,OAAA,EAAAA,EAAQW,WAAR,IAEJJ,OAAQL,EACRM,IAAKL,GAEL,gBAAC,MAAD,CAAYM,KAAI,cAI3BT,MAAAA,OAAA,EAAAA,EAAQY,WACL,0BACI,qBACIN,KAAI,iCACAN,MAAAA,OAAA,EAAAA,EAAQY,WAAR,IADA,IAGJL,OAAQL,EACRM,IAAKL,GAEL,gBAAC,MAAD,CAAYM,KAAI,eCPxC,EAxCY,WAAM,QCTRI,EDUEC,GCVFD,GAAOE,EAAAA,EAAAA,gBAAc,cAoB3B,iBACOF,IDXCC,KAGFE,EAAM,UAAGF,EAAKG,oBAAR,aAAG,EAAmBD,OAC5BhB,EAAM,UAAGc,EAAKG,oBAAR,aAAG,EAAmBjB,OAElC,OACI,uBAAKkB,GAAG,MAAMd,UAAU,iDACpB,gBAAC,EAAAe,EAAD,CACIf,UAAU,8BACVgB,OAAO,QACPC,QAAS,CAAC,OAAQ,OAAQ,QAC1BC,IAAI,mBACJC,MAAO,GACPC,OAAQ,GACRC,QAAS,GACTC,IAAI,kBARR,uBAUCV,MAAAA,OAAA,EAAAA,EAAQW,OACL,uBAAKvB,UAAU,eACX,qBAAGA,UAAU,oDACRY,EAAOW,OAEXX,MAAAA,OAAA,EAAAA,EAAQY,UACL,qBAAGxB,UAAU,8DACRY,MAAAA,OADL,EACKA,EAAQY,SAGhB5B,GACG,uBAAKI,UAAU,eACX,gBAAC,EAAD,CAAaJ,OAAQA,S,0FEjCpC6B,EAAe,SAAC,GAIJ,IAHrBC,EAGqB,EAHrBA,WACAC,EAEqB,EAFrBA,iBACAC,EACqB,EADrBA,SAQA,OACI,sBAAI5B,UAAU,uDACT0B,MAAAA,OADL,EACKA,EAAYG,KAAI,SAACC,GAAD,OACb,sBACIC,IAAKD,EAASE,WACdhC,UAAS,2DACL2B,IAAqBG,EAASE,WACxB,iDACA,IAEVC,SAhBQC,EAgBgBJ,EAASE,WAhBT,WAChCJ,GACAA,EAASM,MAgBAJ,EAASE,WATd,KAS4BF,EAASK,WATrC,KATW,IAACD,O,6BCRfE,EAAqB,SAAC,GAA4C,IAA1CV,EAA0C,EAA1CA,WACjC,OACI,sBAAI1B,UAAU,oDACT0B,MAAAA,OADL,EACKA,EAAYG,KAAI,SAACC,GACd,OACI,sBAAIC,IAAKD,GACL,gBAAC,EAAAO,KAAD,CACIC,GAAE,eAAiBC,GAAAA,CAAUT,GAC7B9B,UAAU,oEAET8B,U,iECyC7B,IA/CqB,SAAC,GAAgC,MAA9BU,EAA8B,EAA9BA,KACpB,OACI,2BACIxC,UAAU,sBACVyC,WAAS,EACTC,SAAS,6BAET,0BAAQ1C,UAAU,QACd,6BACKwC,EAAKG,KAAKC,YAAYlB,YACnB,gBAAC,IAAD,CACIA,WAAYc,EAAKG,KAAKC,YAAYlB,cAI9C,sBAAI1B,UAAU,8FACV,gBAAC,EAAAqC,KAAD,CAAMC,GAAIE,EAAKG,KAAKE,OAAOC,KAAMC,SAAS,OACtC,wBAAMA,SAAS,YACVP,EAAKG,KAAKC,YAAYI,SAInC,yBAAOhD,UAAU,qEACZwC,EAAKG,KAAKC,YAAYK,OAG/B,2BAASjD,UAAU,iCACf,qBACIkD,wBAAyB,CACrBC,OAAM,UACDX,EAAKG,KAAKC,YAAYQ,aACnBZ,EAAKG,KAAKU,eAFZ,QAGF,IAERN,SAAS,iBAIjB,8BACI,yBAAO/C,UAAU,oDACb,gBAAC,KAAD,CAAesD,KAAMd,EAAKG,KAAKC,YAAYU,Y,kFCwE/D,UA5GmB,SAAC,GAAyC,cAAvC7C,EAAuC,EAAvCA,KAAM8C,EAAiC,EAAjCA,SACxB,EAAkCC,EAAAA,SAA0B,IAArDC,EAAP,KAAkBC,EAAlB,KAEMC,GAAY,UAAAlD,EAAKC,KAAKG,oBAAV,eAAwBmC,QAAxB,QACZY,EAAQnD,EAAKoD,kBAAkBC,MAe/BC,EAAgBP,EAAAA,SAAc,WAChC,OAAQI,MAAAA,EAAAA,EAAS,IAAII,QAAO,SAACC,GAAM,MAC/B,GAAKR,MAAAA,GAAD,UAACA,EAAWS,cAAZ,QAAC,EAAmBC,QACpB,OAAO,EAGX,IAAMC,EAAQ,IAAIC,OAAJ,KAAgBZ,EAAUS,OAAOC,QAAjC,KAA8C,MAC5D,SAAIF,EAAEtB,KAAK2B,kBAAmBF,EAAMG,KAAKN,EAAEtB,KAAK2B,sBAK5CL,EAAEtB,KAAKC,YAAYI,QACnBoB,EAAMG,KAAKN,EAAEtB,KAAKC,YAAYI,aAOvC,CAACS,EAAUS,SAEd,OAAIN,GAA0B,IAAjBA,EAAMY,OAEX,gBAAC,IAAD,CAAQjB,SAAUA,EAAUP,MAAOW,GAC/B,gBAAC,IAAD,CAAKX,MAAM,cAEX,sLAMA,gBAAC,IAAD,OAMR,gBAAC,IAAD,CAAQO,SAAUA,EAAUP,MAAOW,GAC/B,gBAAC,IAAD,CAAKX,MAAM,WACX,gBAAC,IAAD,MACA,8BACI,qCAEJ,4BACI,uBAAKhD,UAAU,UACX,yBAAOA,UAAU,SACb,yBACIyE,KAAK,OACLlD,KAAK,UACLvB,UAAU,wJACV4B,SAjEH,SAAC8C,GAClB,IAAMC,EAAQD,EAAMvE,OAAOwE,MACrBpD,EAAOmD,EAAMvE,OAAOoB,KAE1BmC,GAAa,SAACkB,GAAD,8BACLA,MAAAA,EAAAA,EAAa,GADR,CAETV,OAAQ,OAAF,WACEU,MAAAA,EAAAA,EAAa,IAAIV,QADnB,OAED3C,GAAOoD,EAFN,UA4DUA,MAAK,oBAAElB,EAAUS,cAAZ,aAAE,EAAkBC,eAApB,QAA+B,GACpCU,YAAY,cAKxB,uBAAK7E,UAAU,6CACV+D,EAAcS,OAAS,EACpB,gBAAC,WAAD,KACI,qBAAGxE,UAAU,mBAAb,SACI+D,EAAcS,OADlB,SAEQT,EAAcS,OAAS,EAAI,IAAM,KAEzC,sBAAIxE,UAAU,mBACT+D,EAAclC,KAAI,SAACW,GAChB,OACI,sBAAIT,IAAKS,EAAKG,KAAKE,OAAOC,MACtB,gBAAC,IAAD,CAAcN,KAAMA,UAMxC,UAAAiB,EAAUS,cAAV,SAAkBC,QAClB,qBAAGnE,UAAU,QAAb,sCAC8ByD,EAAUS,cADxC,aAC8B,EAAkBC,SAGhD,+B","sources":["webpack://bbon.me/./src/components/social-links/index.tsx","webpack://bbon.me/./src/components/bio.tsx","webpack://bbon.me/./src/hooks/queries/useSiteQuery.ts","webpack://bbon.me/./src/components/categories/category-list.tsx","webpack://bbon.me/./src/components/categories/simple-category-list.tsx","webpack://bbon.me/./src/components/post-list-item.tsx","webpack://bbon.me/./src/pages/search.tsx"],"sourcesContent":["import * as React from 'react';\nimport { FaFacebook, FaGithub, FaLinkedin, FaTwitter } from 'react-icons/fa';\nimport { Social } from '../../models/data';\n\nimport './style.css';\n\ninterface SocialLinksProps {\n    social: Social;\n    openNewWindow?: boolean;\n}\n\nconst SocialLinks = ({ social, openNewWindow }: SocialLinksProps) => {\n    const anchroTarget = openNewWindow ? '_blank' : '_self';\n    const anchorRel = `noreferrer ${openNewWindow ? 'external' : ''}`;\n    return (\n        <ul className=\"social-list\">\n            {social?.github && (\n                <li>\n                    <a\n                        href={`https://github.com/${social?.github || ``}`}\n                        target={anchroTarget}\n                        rel={anchorRel}\n                    >\n                        <FaGithub size={`1.3rem`} />\n                    </a>\n                </li>\n            )}\n            {social?.twitter && (\n                <li>\n                    <a\n                        href={`https://twitter.com/${social?.twitter || ``}`}\n                        target={anchroTarget}\n                        rel={anchorRel}\n                    >\n                        <FaTwitter size={'1.3rem'} />\n                    </a>\n                </li>\n            )}\n            {social?.facebook && (\n                <li>\n                    <a\n                        href={`https://www.facebook.com/${\n                            social?.facebook || ``\n                        }`}\n                        target={anchroTarget}\n                        rel={anchorRel}\n                    >\n                        <FaFacebook size={`1.3rem`} />\n                    </a>\n                </li>\n            )}\n            {social?.linkedin && (\n                <li>\n                    <a\n                        href={`https://www.linkedin.com/in/${\n                            social?.linkedin || ``\n                        }/`}\n                        target={anchroTarget}\n                        rel={anchorRel}\n                    >\n                        <FaLinkedin size={`1.3rem`} />\n                    </a>\n                </li>\n            )}\n        </ul>\n    );\n};\n\nexport default SocialLinks;\n","/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from 'react';\nimport { StaticImage } from 'gatsby-plugin-image';\nimport { FaTwitter } from 'react-icons/fa';\nimport { useSiteQuery } from '../hooks/queries/useSiteQuery';\nimport SocialLinks from './social-links';\n\nconst Bio = () => {\n    const { site } = useSiteQuery();\n\n    // Set these values by editing \"siteMetadata\" in gatsby-config.js\n    const author = site.siteMetadata?.author;\n    const social = site.siteMetadata?.social;\n\n    return (\n        <div id=\"bio\" className=\"flex w-full items-center font-sans px-4 py-12\">\n            <StaticImage\n                className=\"w-10 h-10 rounded-full mr-4\"\n                layout=\"fixed\"\n                formats={['auto', 'webp', 'avif']}\n                src=\"../images/me.png\"\n                width={50}\n                height={50}\n                quality={95}\n                alt=\"Profile picture\"\n            />\n            {author?.name && (\n                <div className=\"flex-1 px-2\">\n                    <p className=\"text-base font-bold md:text-xl leading-none mb-1\">\n                        {author.name}\n                    </p>\n                    {author?.summary && (\n                        <p className=\"text-gray-600 dark:text-gray-400 text-xs md:text-base mb-1\">\n                            {author?.summary}\n                        </p>\n                    )}\n                    {social && (\n                        <div className=\"justify-end\">\n                            <SocialLinks social={social} />\n                        </div>\n                    )}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default Bio;\n","import { useStaticQuery, graphql } from 'gatsby';\nimport { Site } from '../../models/data';\n\nexport const useSiteQuery = () => {\n    const data = useStaticQuery<{ site: Site }>(graphql`\n        query BioQuery {\n            site {\n                siteMetadata {\n                    title\n                    author {\n                        name\n                        summary\n                    }\n                    social {\n                        twitter\n                        github\n                        linkedin\n                        facebook\n                    }\n                }\n            }\n        }\n    `);\n\n    return {\n        ...data,\n    };\n};\n","import * as React from 'react';\nimport { Tag } from '../../models/data';\n\n// import './tag-list.css';\n\ninterface CategoryListProps {\n    categories?: Tag[];\n    selectedCategory?: string;\n    onChange?: (category: string) => void;\n}\n\nexport const CategoryList = ({\n    categories,\n    selectedCategory,\n    onChange,\n}: CategoryListProps) => {\n    const handleClickTag = (tag: string) => () => {\n        if (onChange) {\n            onChange(tag);\n        }\n    };\n\n    return (\n        <ul className=\"flex flex-row flex-wrap break-words gap-3 px-4 py-3\">\n            {categories?.map((category) => (\n                <li\n                    key={category.fieldValue}\n                    className={`cursor-pointer text-green-600 dark:text-green-600  p-2 ${\n                        selectedCategory === category.fieldValue\n                            ? 'cursor-not-allowed border-green-600 border-b-2'\n                            : ''\n                    }`}\n                    onClick={handleClickTag(category.fieldValue)}\n                >\n                    {category.fieldValue} ({category.totalCount})\n                </li>\n            ))}\n        </ul>\n    );\n};\n","import { Link } from 'gatsby';\nimport * as React from 'react';\nimport kebabCase from 'lodash/kebabCase';\n\ninterface SimpleCategoryListProps {\n    categories?: string[];\n}\n\nexport const SimpleCategoryList = ({ categories }: SimpleCategoryListProps) => {\n    return (\n        <ul className=\"list-style-none flex gap-3 flex-wrap break-words\">\n            {categories?.map((category) => {\n                return (\n                    <li key={category}>\n                        <Link\n                            to={`/categories/${kebabCase(category)}`}\n                            className=\"text-base md:text-sm text-green-500 no-underline hover:underline\"\n                        >\n                            {category}\n                        </Link>\n                    </li>\n                );\n            })}\n        </ul>\n    );\n};\n","import { Link } from 'gatsby';\nimport * as React from 'react';\nimport { Post } from '../models/data';\nimport { SimpleTagList } from './tags';\nimport { SimpleCategoryList } from './categories';\n\nimport '../components/tags/tag-list.css';\n\ninterface PostListItemProps {\n    post: Post;\n}\n\nconst PostListItem = ({ post }: PostListItemProps) => {\n    return (\n        <article\n            className=\"post-list-item py-6\"\n            itemScope\n            itemType=\"http://schema.org/Article\"\n        >\n            <header className=\"pt-6\">\n                <aside>\n                    {post.node.frontmatter.categories && (\n                        <SimpleCategoryList\n                            categories={post.node.frontmatter.categories}\n                        />\n                    )}\n                </aside>\n                <h2 className=\"font-bold font-sans break-words text-gray-900 dark:text-gray-100 pb-2 text-3xl md:text-4xl\">\n                    <Link to={post.node.fields.slug} itemProp=\"url\">\n                        <span itemProp=\"headline\">\n                            {post.node.frontmatter.title}\n                        </span>\n                    </Link>\n                </h2>\n                <small className=\"text-sm md:text-base font-normal text-gray-600 dark:text-gray-400\">\n                    {post.node.frontmatter.date}\n                </small>\n            </header>\n            <section className=\"article-body mt-1 break-words\">\n                <p\n                    dangerouslySetInnerHTML={{\n                        __html:\n                            (post.node.frontmatter.description ||\n                                post.node.excerpt) ??\n                            '',\n                    }}\n                    itemProp=\"description\"\n                />\n            </section>\n\n            <footer>\n                <aside className=\"text-base md:text-sm text-gray-500 flex flex-row\">\n                    <SimpleTagList tags={post.node.frontmatter.tags} />\n                </aside>\n            </footer>\n        </article>\n    );\n};\n\nexport default PostListItem;\n","import * as React from 'react';\nimport { graphql, PageProps } from 'gatsby';\nimport Bio from '../components/bio';\nimport Layout from '../components/layout';\nimport Seo from '../components/seo';\nimport { Posts } from '../models/data';\nimport PostListItem from '../components/post-list-item';\n\ninterface FormValues {\n    keyword?: string;\n}\n\ninterface FormState {\n    values?: FormValues;\n}\n\nconst SearchPage = ({ data, location }: PageProps<Posts>) => {\n    const [formState, setFormState] = React.useState<FormState>({});\n\n    const siteTitle = data.site.siteMetadata?.title || `Title`;\n    const posts = data.allMarkdownRemark.edges;\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const value = event.target.value;\n        const name = event.target.name;\n\n        setFormState((prevState) => ({\n            ...(prevState ?? {}),\n            values: {\n                ...(prevState ?? {}).values,\n                [name]: value,\n            },\n        }));\n    };\n\n    const filteredPosts = React.useMemo(() => {\n        return (posts ?? []).filter((x) => {\n            if (!formState?.values?.keyword) {\n                return false;\n            }\n\n            const regex = new RegExp(`.*${formState.values.keyword}.*`, 'gi');\n            if (x.node.rawMarkdownBody && regex.test(x.node.rawMarkdownBody)) {\n                return true;\n            }\n\n            if (\n                x.node.frontmatter.title &&\n                regex.test(x.node.frontmatter.title)\n            ) {\n                return true;\n            }\n\n            return false;\n        });\n    }, [formState.values]);\n\n    if (posts && posts.length === 0) {\n        return (\n            <Layout location={location} title={siteTitle}>\n                <Seo title=\"All posts\" />\n\n                <p>\n                    No blog posts found. Add markdown posts to \"content/blog\"\n                    (or the directory you specified for the\n                    \"gatsby-source-filesystem\" plugin in gatsby-config.js).\n                </p>\n\n                <Bio />\n            </Layout>\n        );\n    }\n\n    return (\n        <Layout location={location} title={siteTitle}>\n            <Seo title=\"Search\" />\n            <Bio />\n            <header>\n                <h1>Search</h1>\n            </header>\n            <main>\n                <div className=\"w-full\">\n                    <label className=\"block\">\n                        <input\n                            type=\"text\"\n                            name=\"keyword\"\n                            className=\"mt-1 block w-full rounded-md shadow-sm border-green-600 focus:border-green-300 focus:ring focus:ring-green-200 focus:ring-opacity-50 dark:bg-gray-800\"\n                            onChange={handleChange}\n                            value={formState.values?.keyword ?? ''}\n                            placeholder=\"Keyword\"\n                        />\n                    </label>\n                </div>\n\n                <div className=\"flex flex-col justify-center items-center\">\n                    {filteredPosts.length > 0 ? (\n                        <React.Fragment>\n                            <p className=\"py-4 self-start\">{`Found ${\n                                filteredPosts.length\n                            } post${filteredPosts.length > 1 ? 's' : ''}`}</p>\n\n                            <ol className=\"list-style-none\">\n                                {filteredPosts.map((post) => {\n                                    return (\n                                        <li key={post.node.fields.slug}>\n                                            <PostListItem post={post} />\n                                        </li>\n                                    );\n                                })}\n                            </ol>\n                        </React.Fragment>\n                    ) : formState.values?.keyword ? (\n                        <p className=\"py-4\">\n                            Does not find post about {formState.values?.keyword}\n                        </p>\n                    ) : (\n                        <p></p>\n                    )}\n                </div>\n            </main>\n        </Layout>\n    );\n};\n\nexport default SearchPage;\n\nexport const pageQuery = graphql`\n    query {\n        site {\n            siteMetadata {\n                title\n            }\n        }\n        allMarkdownRemark(\n            limit: 2000\n            sort: { fields: [frontmatter___date], order: DESC }\n        ) {\n            edges {\n                node {\n                    excerpt\n                    fields {\n                        slug\n                    }\n                    frontmatter {\n                        date(formatString: \"MMMM DD, YYYY\")\n                        title\n                        description\n                        tags\n                        categories\n                        featuredImage {\n                            childImageSharp {\n                                fluid(maxWidth: 1024) {\n                                    ...GatsbyImageSharpFluid\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n`;\n"],"names":["social","openNewWindow","anchroTarget","anchorRel","className","github","href","target","rel","size","twitter","facebook","linkedin","data","site","useStaticQuery","author","siteMetadata","id","S","layout","formats","src","width","height","quality","alt","name","summary","CategoryList","categories","selectedCategory","onChange","map","category","key","fieldValue","onClick","tag","totalCount","SimpleCategoryList","Link","to","kebabCase","post","itemScope","itemType","node","frontmatter","fields","slug","itemProp","title","date","dangerouslySetInnerHTML","__html","description","excerpt","tags","location","React","formState","setFormState","siteTitle","posts","allMarkdownRemark","edges","filteredPosts","filter","x","values","keyword","regex","RegExp","rawMarkdownBody","test","length","type","event","value","prevState","placeholder"],"sourceRoot":""}