{"version":3,"file":"component---src-templates-blog-list-tsx-3891291a155689f46d8b.js","mappings":"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","sources":["webpack://bbon.me/./src/components/categories/category-list.tsx","webpack://bbon.me/./src/components/categories/simple-category-list.tsx","webpack://bbon.me/./src/components/hr.tsx","webpack://bbon.me/./src/components/pagination/page-nav.tsx","webpack://bbon.me/./src/components/post-list-item.tsx","webpack://bbon.me/./src/templates/blog-list.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Tag } from '../../models/data';\n\ninterface CategoryListProps {\n    categories?: Tag[];\n    selectedCategory?: string;\n    onChange?: (category: string) => void;\n}\n\nexport const CategoryList = ({\n    categories,\n    selectedCategory,\n    onChange,\n}: CategoryListProps) => {\n    const handleClickTag = (tag: string) => () => {\n        if (onChange) {\n            onChange(tag);\n        }\n    };\n\n    return (\n        <ul className=\"flex flex-row flex-wrap break-words gap-3 px-4 py-3\">\n            {categories?.map((category) => (\n                <li\n                    key={category.fieldValue}\n                    className={`cursor-pointer text-green-600 dark:text-green-600  p-2 ${\n                        selectedCategory === category.fieldValue\n                            ? 'cursor-not-allowed border-green-600 border-b-2'\n                            : ''\n                    }`}\n                    onClick={handleClickTag(category.fieldValue)}\n                >\n                    {category.fieldValue} ({category.totalCount})\n                </li>\n            ))}\n        </ul>\n    );\n};\n","import { Link } from 'gatsby';\nimport * as React from 'react';\nimport kebabCase from 'lodash/kebabCase';\n\ninterface SimpleCategoryListProps {\n    categories?: string[];\n}\n\nexport const SimpleCategoryList = ({ categories }: SimpleCategoryListProps) => {\n    return (\n        <ul className=\"list-style-none flex gap-3 flex-wrap break-words\">\n            {categories?.map((category) => {\n                return (\n                    <li key={category}>\n                        <Link\n                            to={`/categories/${kebabCase(category)}`}\n                            className=\"text-base md:text-sm text-green-500 no-underline hover:underline\"\n                        >\n                            {category}\n                        </Link>\n                    </li>\n                );\n            })}\n        </ul>\n    );\n};\n","import * as React from 'react';\n\nexport const Hr = () => {\n    return <hr className=\"border-b-2 border-gray-400 my-8\" />;\n};\n","import * as React from 'react';\nimport { Link, navigate } from 'gatsby';\n\ninterface PageNavProp {\n    showDescription?: boolean;\n    useShortcut?: boolean;\n    current: number;\n    total: number;\n    path: string;\n}\n\nexport const PageNav = ({\n    current,\n    total,\n    path,\n    showDescription,\n    useShortcut,\n}: PageNavProp) => {\n    const [selectedPage, setSelectedPage] = React.useState<string>(\n        `${current}`\n    );\n\n    const handleChange = (\n        event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>\n    ) => {\n        const value = event.target.value;\n\n        setSelectedPage((_) => value);\n    };\n\n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n\n        if (selectedPage && selectedPage !== `${current}`) {\n            navigate(\n                `${path}${selectedPage === '1' ? '' : `/${selectedPage}`}`\n            );\n        }\n    };\n\n    return (\n        <nav>\n            <div className=\"font-sans container max-w-4xl mx-auto flex flex-col justify-center items-center\">\n                <div className=\"w-full mx-auto flex flex-wrap\">\n                    <div className=\"flex-start text-left md:w-1/2 flex-1\">\n                        {current > 1 && (\n                            <React.Fragment>\n                                <span className=\"text-xs md:text-sm font-normal text-gray-600\">\n                                    &lt; Previous Page\n                                </span>\n\n                                <Link\n                                    to={`${path}${\n                                        current - 1 < 2 ? '' : `/${current - 1}`\n                                    }`}\n                                    rel=\"prev\"\n                                    className=\"break-normal text-base md:text-sm text-green-500 font-bold no-underline hover:underline\"\n                                >\n                                    <br />\n                                    {`Previous Page`}\n                                </Link>\n                            </React.Fragment>\n                        )}\n                    </div>\n                    <div className=\"flex-end text-right md:w-1/2 flex-1\">\n                        {current < total && (\n                            <React.Fragment>\n                                <span className=\"text-xs md:text-sm font-normal text-gray-600\">\n                                    Next Page &gt;\n                                </span>\n                                <br />\n                                <Link\n                                    to={`${path}/${current + 1}`}\n                                    rel=\"next\"\n                                    className=\"break-normal text-base md:text-sm text-green-500 font-bold no-underline hover:underline\"\n                                >\n                                    {`Next Page`}\n                                </Link>\n                            </React.Fragment>\n                        )}\n                    </div>\n                </div>\n\n                <div className=\"flex-1 flex justify-center items-center w-full gap-3 my-6 flex-wrap\">\n                    {showDescription && (\n                        <div className=\"\">\n                            <h2 className=\"flex gap-2 text-sm\">\n                                <span>{`Posts on`}</span>\n                                <span className=\"text-green-500\">{`${current}`}</span>\n                                <span>of</span>\n                                <span>{`${total} page${\n                                    total > 1 ? 's' : ''\n                                }`}</span>\n                            </h2>\n                        </div>\n                    )}\n                    {useShortcut && (\n                        <form onSubmit={handleSubmit} className=\"flex gap-1\">\n                            <select\n                                className=\"rounded-md shadow-sm border-green-600 focus:border-green-300 focus:ring focus:ring-green-200 focus:ring-opacity-50\"\n                                onChange={handleChange}\n                                value={selectedPage}\n                            >\n                                {Array.from({ length: total }).map(\n                                    (_, index) => (\n                                        <option\n                                            key={index + 1}\n                                            value={index + 1}\n                                        >\n                                            {index + 1}\n                                        </option>\n                                    )\n                                )}\n                            </select>\n                            <button\n                                type=\"submit\"\n                                className=\"button bg-green-600 text-gray-100 focus:ring focus:ring-green-200 focus:ring-opacity-50\"\n                            >\n                                Go\n                            </button>\n                        </form>\n                    )}\n                </div>\n            </div>\n        </nav>\n    );\n};\n","import { Link } from 'gatsby';\nimport * as React from 'react';\nimport { Post } from '../models/data';\nimport { SimpleTagList } from './tags';\nimport { SimpleCategoryList } from './categories';\n\nimport '../components/tags/tag-list.css';\n\ninterface PostListItemProps {\n    post: Post;\n}\n\nconst PostListItem = ({ post }: PostListItemProps) => {\n    return (\n        <article\n            className=\"post-list-item py-6\"\n            itemScope\n            itemType=\"http://schema.org/Article\"\n        >\n            <header className=\"pt-6\">\n                <aside>\n                    {post.node.frontmatter.categories && (\n                        <SimpleCategoryList\n                            categories={post.node.frontmatter.categories}\n                        />\n                    )}\n                </aside>\n                <h2 className=\"font-bold font-sans break-words text-gray-900 dark:text-gray-100 pb-2 text-3xl md:text-4xl\">\n                    <Link to={post.node.fields.slug} itemProp=\"url\">\n                        <span itemProp=\"headline\">\n                            {post.node.frontmatter.title}\n                        </span>\n                    </Link>\n                </h2>\n                <small className=\"text-sm md:text-base font-normal text-gray-600 dark:text-gray-400\">\n                    {post.node.frontmatter.date}\n                </small>\n            </header>\n            <section className=\"article-body mt-1 break-words\">\n                <p\n                    dangerouslySetInnerHTML={{\n                        __html:\n                            (post.node.frontmatter.description ||\n                                post.node.excerpt) ??\n                            '',\n                    }}\n                    itemProp=\"description\"\n                />\n            </section>\n\n            <footer>\n                <aside className=\"text-base md:text-sm text-gray-500 flex flex-row\">\n                    <SimpleTagList tags={post.node.frontmatter.tags} />\n                </aside>\n            </footer>\n        </article>\n    );\n};\n\nexport default PostListItem;\n","import { graphql, Link, PageProps } from 'gatsby';\nimport * as React from 'react';\nimport { Hr } from '../components/hr';\nimport Layout from '../components/layout';\nimport { PageNav } from '../components/pagination/page-nav';\nimport PostListItem from '../components/post-list-item';\nimport Seo from '../components/seo';\nimport { Site, MarkdownRemarks } from '../models/data';\n\ninterface BlogListTemplatePageContext {\n    limit: number;\n    skip: number;\n    totalPages: number;\n    currentPage: number;\n    basePath: string;\n}\n\ninterface Data {\n    allMarkdownRemark: MarkdownRemarks;\n    site: Site;\n}\n\nconst BlogListTemplate = ({\n    data,\n    pageContext,\n    location,\n}: PageProps<Data, BlogListTemplatePageContext>) => {\n    const {\n        site: { siteMetadata },\n        allMarkdownRemark: { edges },\n    } = data;\n    return (\n        <Layout location={location} title={siteMetadata?.title ?? ''}>\n            <Seo\n                title={`Posts on ${pageContext.currentPage} of ${\n                    pageContext.totalPages\n                } page${pageContext.totalPages > 1 ? 's' : ''}`}\n            />\n\n            <main>\n                {edges?.map((edge) => {\n                    return (\n                        <PostListItem key={edge.node.fields.slug} post={edge} />\n                    );\n                })}\n            </main>\n\n            <Hr />\n\n            <footer>\n                <PageNav\n                    current={pageContext.currentPage}\n                    total={pageContext.totalPages}\n                    path={pageContext.basePath}\n                    showDescription\n                    useShortcut\n                />\n            </footer>\n        </Layout>\n    );\n};\n\nexport default BlogListTemplate;\n\nexport const blogListQuery = graphql`\n    query blogListQuery($skip: Int!, $limit: Int!) {\n        site {\n            siteMetadata {\n                title\n            }\n        }\n        allMarkdownRemark(\n            sort: { fields: [frontmatter___date], order: DESC }\n            limit: $limit\n            skip: $skip\n        ) {\n            edges {\n                node {\n                    excerpt(format: PLAIN)\n                    fields {\n                        slug\n                    }\n                    frontmatter {\n                        date(formatString: \"MMMM DD, YYYY\")\n                        title\n                        tags\n                        categories\n                        featuredImage {\n                            childImageSharp {\n                                gatsbyImageData(layout: FIXED)\n                            }\n                        }\n                        draft\n                        comments\n                    }\n                }\n            }\n        }\n    }\n`;\n"],"names":["CategoryList","categories","selectedCategory","onChange","React","className","map","category","key","fieldValue","onClick","tag","totalCount","SimpleCategoryList","Link","to","kebabCase","Hr","PageNav","current","total","path","showDescription","useShortcut","selectedPage","setSelectedPage","rel","onSubmit","event","preventDefault","navigate","value","target","_","Array","from","length","index","type","post","itemScope","itemType","node","frontmatter","fields","slug","itemProp","title","date","dangerouslySetInnerHTML","__html","description","excerpt","SimpleTagList","tags","data","pageContext","location","siteMetadata","site","edges","allMarkdownRemark","Layout","Seo","currentPage","totalPages","edge","PostListItem","basePath"],"sourceRoot":""}