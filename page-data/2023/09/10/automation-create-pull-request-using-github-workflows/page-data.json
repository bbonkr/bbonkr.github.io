{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/2023/09/10/automation-create-pull-request-using-github-workflows","result":{"data":{"site":{"siteMetadata":{"title":"<bbon />","siteUrl":"https://bbon.me"}},"markdownRemark":{"id":"e743d401-49d8-5aec-8929-ee997f4f7646","excerpt":"개요 깃 플로우 Git flow 코드의 버전 제어를 위해 깃 Git 을 사용하면 보통 깃 플로우 Git flow 를 활용하고 계실 것으로 생각합니다. 통상적으로 깃 플로우를 활용하면 기본이 되는 브랜치 (보통 main) 와 코드 통합용 브랜치 (보통 dev…","html":"<h2>개요</h2>\n<h3>깃 플로우 <Small>Git flow</small></h3>\n<p>코드의 버전 제어를 위해 깃 <small>Git</small> 을 사용하면 보통 깃 플로우 <small>Git flow</small> 를 활용하고 계실 것으로 생각합니다.</p>\n<p>통상적으로 깃 플로우를 활용하면 기본이 되는 브랜치 (보통 main) 와 코드 통합용 브랜치 (보통 dev), 작업용 브랜치 (features/*, fix/*, …) … 등 여러 브랜치를 관리해야 합니다.</p>\n<p>작업이 완료된 코드는 여러 단계를 거쳐 기본 브랜치로 병합됩니다.</p>\n<p>이 때, 브랜치간 병합과 코드 리뷰를 위해 깃허브의 풀 리퀘스트 기능을 많이 활용하고 계실 것으로 생각합니다.</p>\n<h3>현재 상태</h3>\n<p>제가 보통 관리는 저장소는 아래와 같이 처리하고 있습니다.</p>\n<ol>\n<li>작업 브랜치 (features/1-some-feature)에서 코드를 작성하고, 코드 통합을 위한 브랜치 (dev)로 풀 리퀘스트를 작성합니다.</li>\n<li>코드 리뷰가 필요한 경우 코드 리뷰를 진행하고, 관련 절차가 마무리되면 작업 브랜치의 변경사항을 코드 통합을 위한 브랜치에 병합니다.</li>\n<li>코드 통합을 위한 브랜치의 코드가 게시 등의 사유로 기본 브랜치로 병합되어야 하는 경우, 코드 통합을 위한 브랜치에서 기본 브랜치로 병합되는 풀 리퀘스트를 작성합니다.</li>\n<li>작성된 풀 리퀘스트는 필요한 절차를 마친 후 기본 브랜치로 병합합니다.</li>\n</ol>\n<p>작업 브랜치에서 코드 통합을 위한 브랜치로의 풀 리퀘스트 작성은 자동화하지 않습니다.</p>\n<blockquote>\n<p>자동화하려면 커밋 메시지 또는 다른 방법을 통해 가능하겠지만, 시간이 흐르면 잘 기억이 나지 않는 등의 사유로 의미가 없어져 버렸습니다.</p>\n</blockquote>\n<p>하지만, 작업 브랜치에서 코드 통합을 위한 브랜치로의 풀 리퀘스트가 완료되는 경우 이 후 작성이 필요한 풀 리퀘스트는 자동화하면 수고를 줄일 수 있었습니다.</p>\n<h3>자동화</h3>\n<p>깃허브의 워크플로우는 여러가지 트리거를 제공하고 있습니다.</p>\n<p>이 중 풀 리퀘스트가 완료되었을 때, 지정된 워크플로우를 실행하는 트리거를 활용하면 되겠다고 생각했습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Wokring branch pull closed as completed'</span>\n\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># rebuild any PRs and main branch changes</span>\n    <span class=\"token key atrule\">pull_request</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">types</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'closed'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">create-pr-to-main</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">if</span><span class=\"token punctuation\">:</span> github.event.pull_request.merged == true <span class=\"token important\">&amp;&amp;</span> github.event.pull_request.base.ref == 'dev'\n        <span class=\"token comment\"># ...</span></code></pre></div>\n<p>위 워크플로우 정의는 풀 리퀘스트가 완료되면 트리거 되는 워크플로우입니다.</p>\n<p>그리고, <code class=\"language-text\">create-pr-to-main</code> 작업은 현재 이벤트 정보중 풀 리퀘스트가 병합되고, 풀 리퀘스트의 베이스 브랜치가 <code class=\"language-text\">dev</code> 브랜치면 실행됩니다.</p>\n<p>그리고, 풀 리퀘스트의 작성은 깃허브 커맨드라인 도구 <code class=\"language-text\">gh</code>를 활용하면 커맨드라인에서 간편하게 작성할 수 있습니다.</p>\n<h2>풀 리퀘스트 작성 자동화</h2>\n<h3>풀 리퀘스트의 작성</h3>\n<p>풀 리퀘스트를 작성하려면 기본적으로 아래 정보가 필요합니다.</p>\n<ol>\n<li>헤드 <small>head</small> 브랜치 이름</li>\n<li>베이스 <small>base</small> 브랜치 이름</li>\n<li>제목</li>\n<li>본문</li>\n</ol>\n<p>헤드 브랜치는 현재 작업한 내용에 해당하는 브랜치입니다.\n베이스 브랜치는 현재 작업한 내용을 병합하려는 브랜치입니다.</p>\n<p>작성하려는 풀 리퀘스트의 헤드 브랜치는 워크플로우를 트리거한 완료된 풀 리퀘스트의 베이스 브랜치 이름을 사용하면 되겠습니다.</p>\n<p>작성하려는 풀 리퀘스트의 베이스 브랜치는 깃 플로우에 의해 결정되는 부분이라 생각합니다.</p>\n<blockquote>\n<p>깃 플로우의 정의에 따라 베이스 브랜치를 결정할 수 있게 지정해주시면 되겠습니다.</p>\n</blockquote>\n<p>제목은 간략하게 베이스 브랜치 이름이나 필요한 정보를 결정하면 될 것 같습니다.</p>\n<p>본문 역시 필요한 내용을 작성하면 되겠습니다. 저는 작성되는 풀 리퀘스트에 포함된 완료된 풀리퀘스트 목록을 사용하고 싶어서, 관련 풀리퀘스트를 수집하는 깃허브 액션을 작성해서 사용하고 있습니다.</p>\n<blockquote>\n<p><a href=\"https://github.com/bbonkr/get-overview-of-pull-requests-action\">bbonkr/get-overview-of-pull-requests-action</a>\n작성중인 풀 리퀘스트의 베이스 브랜치, 헤드 브랜치, 저장소의 기본 브랜치를 입력하면 이전 풀 리퀘스트 완료 시점부터 현재까지 저장소의 기본브랜치로 병합된 풀 리퀘스트의 번호 목록을 제공하는 깃허브 액션입니다.</p>\n</blockquote>\n<h3>깃허브 워크플로우</h3>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'PR completed'</span>\n\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">pull_request</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">types</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'closed'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token key atrule\">permissions</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">contents</span><span class=\"token punctuation\">:</span> write\n    <span class=\"token key atrule\">pull-requests</span><span class=\"token punctuation\">:</span> write\n\n<span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">MAIN_BRANCH_NAME</span><span class=\"token punctuation\">:</span> main\n\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">create-or-update-pull</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">if</span><span class=\"token punctuation\">:</span> github.event.pull_request.merged == true <span class=\"token important\">&amp;&amp;</span> github.event.pull_request.base.ref == 'dev'\n        <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n        <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Checkout\n              <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v3\n\n            <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Get overview of PULL_REQUEST\n              <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> bbonkr/get<span class=\"token punctuation\">-</span>overview<span class=\"token punctuation\">-</span>of<span class=\"token punctuation\">-</span>pull<span class=\"token punctuation\">-</span>requests<span class=\"token punctuation\">-</span>action@v1\n              <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> get_overview\n              <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n                  <span class=\"token key atrule\">github_token</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> github.token <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n                  <span class=\"token key atrule\">base</span><span class=\"token punctuation\">:</span> main\n                  <span class=\"token key atrule\">head</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> github.event.pull_request.base.ref <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n                  <span class=\"token key atrule\">default_branch</span><span class=\"token punctuation\">:</span> dev\n\n            <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Create pull\n              <span class=\"token key atrule\">if</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> steps.get_overview.outputs.pull_number == '' <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n              <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n                  gh pr create --base ${{ env.MAIN_BRANCH_NAME }} \\\n                    --head ${{ github.event.pull_request.base.ref }} \\\n                    --label '${{ steps.get_overview.outputs.labels }}' \\\n                    --project '${{ env.PROJECT_NAME }}' \\\n                    --reviewer ${{ steps.get_overview.outputs.reviewers }} \\\n                    --assignee ${{ steps.get_overview.outputs.assignees }} \\\n                    --body '${{ steps.get_overview.outputs.body }}' \\\n                    --title 'Release ${{ env.MAIN_BRANCH_NAME }} 🚀'</span>\n              <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n                  <span class=\"token key atrule\">GITHUB_TOKEN</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> github.token <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n            <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Update pull\n              <span class=\"token key atrule\">if</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> steps.get_overview.outputs.pull_number <span class=\"token tag\">!=</span> '' <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n              <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n                  gh pr edit ${{ steps.get_overview.outputs.pull_number }} \\\n                    --body '${{ steps.get_overview.outputs.body }}' \\\n                    --title 'Release ${{ env.MAIN_BRANCH_NAME }} 🚀' \\\n                    --add-label '${{ steps.get_overview.outputs.labels }}'</span>\n              <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n                  <span class=\"token key atrule\">GITHUB_TOKEN</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> github.token <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>풀 업데이트 명령 실행시 권한관련 문제가 발생하면, <code class=\"language-text\">pull:write</code>, <code class=\"language-text\">content:write</code>, <code class=\"language-text\">org:read</code> 권한이 있는 개인 인증 토큰을 만들어 시크릿에 저장 후 사용하시면 문제가 해결되었습니다.</p>\n</blockquote>\n<p>깃허브 워크플로우가 동작한 로그는 아래 링크에서 확인하실 수 있습니다.</p>\n<blockquote>\n<p>시간이 지나면 실행 로그 접근이 불가능할 수도 있습니다.</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/bbonkr/get-overview-of-pull-requests-action/actions/runs/5876132097\">docs: Update README #22 bbonkr/get-overview-of-pull-requests-action</a></li>\n</ul>\n<h2>마침</h2>\n<p>위에 소개해드린 워크플로우는 하나의 브랜치만 대상으로 하고 있어 크게 도움이 되지 않는다고 생각될 수 있습니다.</p>\n<p>병합해야 하는 브랜치의 단계가 조금 많아지면, 많은 수고를 덜 수 있을 것이라 생각합니다.</p>\n<p>그리고, 워크플로우에 필요하신 작업을 몇가지 더 추가하시면 직접 관리할 내용이 조금 줄어들수 있을 것이라 생각하며, 저와 비슷한 내용으로 고민하고 계신분들에게 도움이 되시면 좋겠습니다.</p>\n<p>추가할 단계 추천</p>\n<ul>\n<li>코드의 버전과 깃 태그 동기화</li>\n<li>새 버전 작성시 깃허브 릴리즈 작성</li>\n</ul>","frontmatter":{"title":"깃허브 워크플로우를 활용한 자동 풀 리퀘스트 작성","date":"2023-09-10","description":null,"categories":["blog","computing"],"tags":["automation","git","git-flow","github","github-actions","github-workflows"],"github":{"owner":"bbonkr","repo":"get-overview-of-pull-requests-action"},"featuredImage":null,"draft":false,"comments":false}},"previous":{"fields":{"slug":"/2023/07/16/github-action-next-version-proposal-action/"},"frontmatter":{"title":"Github Action: next-version-proposal-action","draft":false,"comments":false,"featuredImage":null}},"next":{"fields":{"slug":"/2024/04/22/how-to-fix-build-time-error-related-tailwindcss-typography/"},"frontmatter":{"title":"How to fix build time error related @tailwindcss/typography","draft":false,"comments":false,"featuredImage":null}}},"pageContext":{"id":"e743d401-49d8-5aec-8929-ee997f4f7646","previousPostId":"74f14e6e-eefc-53b2-856a-b3b6774d759e","nextPostId":"168f72c2-cee5-52af-bba8-2c8722ea3aa1"}},"staticQueryHashes":["2644450635","3199328057"],"slicesMap":{}}