{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/2023/05/09/using-keystone-for-app-backend","result":{"data":{"site":{"siteMetadata":{"title":"<bbon />","siteUrl":"https://bbon.me"}},"markdownRemark":{"id":"8a10cd1c-b37c-5e00-9618-a7c264bc0dd1","excerpt":"최근 이력사항 데이터를 정리하면서, 이력사항 데이터 관리를 위한 백엔드 응용프로그램 작성을 진행하고 있었습니다. 익숙한 .NET…","html":"<p>최근 이력사항 데이터를 정리하면서, 이력사항 데이터 관리를 위한 백엔드 응용프로그램 작성을 진행하고 있었습니다.</p>\n<p>익숙한 .NET 환경에서 시작하려고, <a href=\"https://github.com/bbonkr/resume.management\">저장소를 추가</a>하고 프로젝트를 준비한 후 엔티티 모델을 정의했습니다.</p>\n<p>계획했던 내용은 아래와 같습니다.</p>\n<ul>\n<li>데이터 처리를 위한 백엔드 응용프로그램: ASP.NET Core</li>\n<li>백엔드 API 를 활용하는 프론트엔드 응용프로그램: next.js</li>\n</ul>\n<p>최근 업무가 늘어 진도가 잘 나가지 않습니다.</p>\n<p>그래서, 귀찮음을 이겨내기 위해 다른 도구를 찾아보기 시작했습니다.</p>\n<h2>KeystoneJS</h2>\n<blockquote>\n<p>The superpowered CMS for developers</p>\n</blockquote>\n<p><a href=\"https://keystonejs.com\">KeystoneJS</a> 를 사용하면, 관리하려고 하는 데이터의 스키마를 기술하면 데이터를 관리하기 위한 엔드포인트와 간략한 UI 까지 작성된다고 합니다.</p>\n<p>데이터를 관리하기 위한 엔드포인트는 <a href=\"https://graphql.org\">GraphQL</a> API 라고 합니다.</p>\n<p>매우 편리해 보여, 기존 계획했던 구현사항을 모두 폐기하고, KeystoneJS 를 사용해서 이력사항 데이터를 관리하는 것으로 결정했습니다.</p>\n<h3>준비</h3>\n<p><a href=\"https://keystonejs.com/docs/getting-started\">시작하기 위한 문서</a>가 간략하게 잘 정리되어 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># nodejs 환경이 준비되어 있는지 확인합니다</span>\n$ <span class=\"token function\">node</span> <span class=\"token parameter variable\">-v</span>\nv18.16.0\n$  <span class=\"token function\">npm</span> <span class=\"token parameter variable\">-v</span>\n<span class=\"token number\">9.5</span>.1\n<span class=\"token comment\"># 작업 디렉터리를 작성할 위치로 이동합니다</span>\n$ <span class=\"token builtin class-name\">cd</span> your/path/\n<span class=\"token comment\"># 프로젝트를 작성합니다.</span>\n$ npx create-keystone-app@latest\n✨ You're about to generate a project using Keystone <span class=\"token number\">6</span> packages.\n\n✔ What directory should create-keystone-app generate your app into? resume-backend-keystone\n\n⠋ Installing dependencies with yarn. This may take a few minutes.\n⚠ Failed to <span class=\"token function\">install</span> with yarn.\n✔ Installed dependencies with npm.\n\n\n🎉  Keystone created a starter project in: resume-backend-keystone\n\n  To launch your app, run:\n\n  - <span class=\"token builtin class-name\">cd</span> resume-backend-keystone\n  - <span class=\"token function\">npm</span> run dev\n\n  Next steps:\n\n  - Read resume-backend-keystone/README.md <span class=\"token keyword\">for</span> additional getting started details.\n  - Edit resume-backend-keystone/keystone.ts to customize your app.\n  - Open the Admin UI\n  - Open the Graphql API\n  - Read the docs\n  - Star Keystone on GitHub</code></pre></div>\n<p><code class=\"language-text\">create-keystone-app@latest</code> CLI 도구를 실행하면 필요한 정보를 문답식으로 입력받는 절차가 시작됩니다.</p>\n<p>간단하게 프로젝트 이름만 지정하면, 입력된 프로젝트 이름을 기반으로 디렉터리를 작성하고, 해당 디렉터리에 기본적으로 필요한 파일들이 복사됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># 작성된 프로젝트 디렉터리로 이동합니다.</span>\n$ <span class=\"token builtin class-name\">cd</span> path/to/project\n<span class=\"token comment\"># 의존 패키지를 설치합니다.</span>\n$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span>\n<span class=\"token punctuation\">..</span>.\n<span class=\"token comment\"># 기본 구성으로 개발서버를 시작합니다.</span>\n$ <span class=\"token function\">npm</span> run dev</code></pre></div>\n<p>웹 브라우저를 열고, 주소창에 개발서버의 주소를 입력합니다.</p>\n<p><code class=\"language-text\">http://localhost:3000</code></p>\n<p>웹 브라우저에서 사용자 작성 절차가 진행되고, 이 후 추가한 사용자로 로그인하면, User 와 Post 항목을 확인할 수 있습니다.</p>\n<p>웹 브라우저에서 확인해보니, 기본적인 조회, 입력, 수정, 삭제가 구현되어 있습니다.</p>\n<p>GraphQL API 백엔드 서버와 nextjs 프론트엔드 서버가 통합되어 실행되는 구조인 것 같습니다.</p>\n<p>원하는 기능을 추가하려고 하지만 않으면, 매우 편리하게 금방 완료할 수 있을 것 같습니다.</p>\n<h3>스키마</h3>\n<p>프로젝트 디렉터리의 <code class=\"language-text\">schema.ts</code> 파일을 열고, 편집을 시작합니다.</p>\n<p>필요한 엔티티를 결정하고, 스키마를 기술했습니다.</p>\n<p>스키마를 정의하는 형식은 아래 코드와 같습니다.</p>\n<p>목록의 이름을 결정하고, 액세스와 필드 목록, 필요하면 훅을 작성합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> list <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@keystone-6/core'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> lists<span class=\"token operator\">:</span> Lists <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 목록 (데이터 집합)의 이름; 데이터베이스의 테이블</span>\n    User<span class=\"token operator\">:</span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 목록 접근 제어</span>\n        access<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 작성된 UI 에서 데이터 접근제어</span>\n            operation<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token comment\">// ... 필요가 없을 것 같아 찾아보지 않았습니다.</span>\n            item<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token comment\">// GraphQL API 에서 데이터 접근제어</span>\n            filter<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// 관리할 데이터 목록; 데이터베이스의 열(Column)</span>\n        fields<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// 데이터 입출력시 추가적으로 동작할 기능</span>\n        hooks<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>목록의 필드를 정의할 때, <code class=\"language-text\">relationship</code> 형식을 사용해서 다른 목록과의 관계를 설정할 수 있게 되어 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> relationship <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@keystone-6/core/fields'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Post 와 Tag 목록의 다대다 관례설정의 예는 아래와 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> list <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@keystone-6/core'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> relationship <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@keystone-6/core/fields'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> lists<span class=\"token operator\">:</span> Lists <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    Post<span class=\"token operator\">:</span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n        fields<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            tags<span class=\"token operator\">:</span> <span class=\"token function\">relationship</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                ref<span class=\"token operator\">:</span> <span class=\"token string\">'Tag.posts'</span><span class=\"token punctuation\">,</span>\n                many<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n                ui<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                    displayMode<span class=\"token operator\">:</span> <span class=\"token string\">'cards'</span><span class=\"token punctuation\">,</span>\n                    cardFields<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                    inlineEdit<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> fields<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                    linkToItem<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n                    inlineConnect<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n                    inlineCreate<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> fields<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'owner'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// ...</span>\n    Tag<span class=\"token operator\">:</span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n        fields<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            posts<span class=\"token operator\">:</span> <span class=\"token function\">relationship</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                ref<span class=\"token operator\">:</span> <span class=\"token string\">'Post.tags'</span><span class=\"token punctuation\">,</span>\n                many<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n                ui<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> hideCreate<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> displayMode<span class=\"token operator\">:</span> <span class=\"token string\">'count'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>접근제어를 설정하기 위해 사용할 수 있는 함수는 아래와 같습니다.</p>\n<p>예1) 로그인된 사용자만 UI 에서 리스트 목록을 확인 가능</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> list <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@keystone-6/core'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isAuthorized</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> session <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> session<span class=\"token operator\">:</span> Session <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span>session<span class=\"token operator\">?.</span>data<span class=\"token operator\">?.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> lists<span class=\"token operator\">:</span> Lists <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    User<span class=\"token operator\">:</span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        access<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            operation<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                query<span class=\"token operator\">:</span> isAuthorized<span class=\"token punctuation\">,</span>\n                <span class=\"token comment\">// ...</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            item<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token comment\">// GraphQL API 에서 데이터 접근제어</span>\n            filter<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>예2) 로그인 사용자는 본인이 작성자한 항목만 조회 가능</p>\n<blockquote>\n<p>목록의 필드에 소유자를 표시하는 owner 필드가 있어야 합니다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> list <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@keystone-6/core'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">filterByOwner</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> session <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> session<span class=\"token operator\">:</span> Session <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>session<span class=\"token operator\">?.</span>data<span class=\"token operator\">?.</span>isAdmin <span class=\"token operator\">??</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>session<span class=\"token operator\">?.</span>data<span class=\"token operator\">?.</span>id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            owner<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                id<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                    equals<span class=\"token operator\">:</span> session<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> lists<span class=\"token operator\">:</span> Lists <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    User<span class=\"token operator\">:</span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        access<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            filter<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                query<span class=\"token operator\">:</span> filterByOwner<span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a href=\"https://keystonejs.com/docs/fields/overview\">문서</a>를 확인하고, 지원하는 필드를 활용해서 필요한 필드들을 모두 정의합니다.</p>\n<p>필드를 모두 정의한 후 개발서버를 시작해서 데이터 입출력이 모두 정상적으로 동작하는지 확인해보니, 의도한 것과 같이 잘 동작하는 것을 확인했습니다.</p>\n<h3>데이터베이스</h3>\n<p>매우 중요한 데이터가 아니고, 많은 트래픽을 처리할 대상이 아니기 때문에 편리하게 파일로 관리할 수 있는 <code class=\"language-text\">Sqlite</code> 를 사용하는 것으로 결정했습니다.</p>\n<p>Sqlite 를 데이터베이스로 사용하면 스키마가 변경될 때 복잡하게 마이그레이션을 진행할 필요도 없는 것으로 확인했습니다.</p>\n<h3>도커</h3>\n<p>GitHub workflows 를 활용해서 이미지를 빌드하고, 관리중인 레지스트리에 업로드하려고 하니 이미지 파일의 크기가 처리할 수 있는 한계를 넘어서 버려 로컬 서버에서 빌드해서 업로드하는 것으로 관리방법을 채택했습니다.</p>\n<p>자동화하면 편리한데, GitHub workflows 에서는 500MB (정확한 크기는 잘 모르겠습니다) 보다 큰 파일은 처리할 수 없는 것 같습니다.</p>\n<p><code class=\"language-text\">413 Request Entity Too Large</code></p>\n<p>로컬서버에서 이미지를 빌드한 후 동일한 레지스트리에 docker push 를 실행하면 문제없이 업로드되고 있어 더이상 해결방법을 찾는 것을 중지했습니다.</p>\n<h3>게시</h3>\n<p>작성된 이력사항 백엔드 응용프로그램이 실행될 서버에 <code class=\"language-text\">docker-compose.yml</code> 파일을 작성해서 컨테이너를 실행할 준비를 합니다.</p>\n<p>sqlite 파일을 마운트해서 컨테이너 외부에서 파일을 관리합니다.</p>\n<p>문제없이 실행된 것을 확인하고, 역 프록시 구성으로, 도메인을 연결해서 웹브라우저에서 확인합니다.</p>\n<p>로그인, 데이터 조회, … 잘 동작합니다.</p>\n<p>그런데, 데이터를 입력하거나, 변경, 삭제를 시도하면 오류 메시지가 출력되고, 데이터 변경이 반영되지 않습니다.</p>\n<p>컨테이너의 사용자가 컨테이너에 마운트한 파일에 쓰기 권한이 없는 것 같습니다.</p>\n<p>이미지를 빌드한 기반 이미지를 확인하니, 사용자 이름 node 그룹 node 로 확인됩니다.</p>\n<blockquote>\n<p><a href=\"https://github.com/nodejs/docker-node/blob/main/docs/BestPractices.md#non-root-user\">Non-root user</a></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># 컨테이너 내부 사용자 정보</span>\n$ <span class=\"token function\">id</span> <span class=\"token function\">node</span>\n<span class=\"token assign-left variable\">uid</span><span class=\"token operator\">=</span><span class=\"token number\">1000</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span> <span class=\"token assign-left variable\">gid</span><span class=\"token operator\">=</span><span class=\"token number\">1000</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span> <span class=\"token assign-left variable\">groups</span><span class=\"token operator\">=</span><span class=\"token number\">1000</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span></code></pre></div>\n<p>호스트 서버에서 sqlite 데이터베이스 파일의 소유자를 1000:1000 으로 변경해서 권한 문제를 해결할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ chwon <span class=\"token parameter variable\">-R</span> <span class=\"token number\">1000</span>:1000 ./sqlite.db</code></pre></div>\n<p>소유자를 변경한 후 데이터 입력이 정상적으로 실행됩니다.</p>\n<h3>연동</h3>\n<p>환경변수로 CORS 허용 원본을 설정할 수 있게 구성해뒀습니다.</p>\n<p>컨테이너 실행시 <a href=\"https://resume.bbon.me\">이력사항 웹앱</a>의 주소를 환경변수에 입력해서, 이력사항 웹앱이 요청하면 정상응답하도록 했습니다.</p>\n<p>이력사항 웹앱 서버측에서 이력사항 백엔드 GraphQL API 를 사용해서 데이터를 요청하게 변경한 후 게시하여 데이터 연동을 완료합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">query</span> <span class=\"token definition-query function\">User</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$where</span><span class=\"token punctuation\">:</span> <span class=\"token atom-input class-name\">UserWhereUniqueInput</span><span class=\"token operator\">!</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property-query\">user</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">where</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$where</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\"># ...</span>\n    <span class=\"token attr-name\">aboutMe</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># ...</span>\n    <span class=\"token attr-name\">contentCategories</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># ...</span>\n    <span class=\"token attr-name\">contents</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># ...</span>\n    <span class=\"token attr-name\">skillCategories</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># ...</span>\n    <span class=\"token attr-name\">skills</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>GraphQL 서버를 작성하는 것은 싫어하지만 사용하는 입장에서 생각하면 한번에 필요한 데이터를 원하는 모양으로 가져올 수 있어 좋은 것 같습니다.</p>\n<h3>완료</h3>\n<p>길게 계획하고 천천히 진행하려고 했는데, 대부분의 구현이 KeystoneJS 내부에서 처리되어 금방 끝나버렸습니다.</p>\n<h2>마치며</h2>\n<p>사이드 프로젝트로 재미난 서비스를 준비할 때, KeystoneJS를 사용해서 백엔드를 구성하면 매우 빠르게 구현할 수 있을 것이라 생각합니다.</p>\n<p>서비스를 확장해야 하는 시점이 오면, 그 때 필요한 기능의 백엔드를 구현하기 시작해도 될 것 같습니다.</p>\n<hr>\n<p>관련 저장소:</p>\n<ul>\n<li><a href=\"https://github.com/bbonkr/resume-backend-keystone\">https://github.com/bbonkr/resume-backend-keystone</a></li>\n<li><a href=\"https://github.com/bbonkr/resume\">https://github.com/bbonkr/resume</a></li>\n<li><a href=\"https://github.com/keystonejs/keystone\">https://github.com/keystonejs/keystone</a></li>\n</ul>","frontmatter":{"title":"Using Keystone for app Backend","date":"2023-05-09","description":null,"categories":["blog","computing"],"tags":["keystonejs","nodejs","typescript"],"github":{"owner":"bbonkr","repo":"resume-backend-keystone"},"featuredImage":null,"draft":null,"comments":false}},"previous":{"fields":{"slug":"/2022/12/31/review-2022/"},"frontmatter":{"title":"Review 2022","draft":null,"comments":null,"featuredImage":null}},"next":null},"pageContext":{"id":"8a10cd1c-b37c-5e00-9618-a7c264bc0dd1","previousPostId":"9099a34b-0bd5-597b-8eff-6b7f3ec24782","nextPostId":null}},"staticQueryHashes":["2644450635","3199328057"],"slicesMap":{}}