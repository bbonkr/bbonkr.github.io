{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/2021/07/11/git-hub-actions-sample-1/",
    "result": {"data":{"site":{"siteMetadata":{"title":"<bbon />","siteUrl":"https://bbon.me"}},"markdownRemark":{"id":"0d8d6727-9bbd-5e53-8c09-c43003bef9f7","excerpt":"최근 작성하는 프로젝트들이 비슷한 형식으로 구성되어 CI/CD 를 GitHub Actions 를 활용하고 있습니다. 간단한 단계는 기본적으로 제공되는 GitHub Actions…","html":"<p>최근 작성하는 프로젝트들이 비슷한 형식으로 구성되어 CI/CD 를 GitHub Actions 를 활용하고 있습니다.</p>\n<p>간단한 단계는 기본적으로 제공되는 GitHub Actions 패키지를 활용하고, 필요로 하는 특정 기능은 검색해보니 대부분 공개된 패키지가 존재합니다.</p>\n<p>몇몇 시행착오를 거쳐 .NET 5 백엔드 응용프로그램과 React 프론트엔드 응용프로그램을 빌드하고, 태그한 후 GitHub Release Draft 를 작성하고, 태그된 커밋을 기준으로 도커 이미지를 빌드해서 레지스트리에 게시하게 구성된 GitHub Actions 입니다.</p>\n<p>대상 프로젝트:</p>\n<ul>\n<li>백엔드: .NET 5</li>\n<li>프론트엔드: React</li>\n<li>게시: Docker registry</li>\n</ul>\n<p>구성된 저장소:</p>\n<ul>\n<li><a href=\"https://github.com/bbonkr/bing-wallpaper\">bbonkr/bing-wallpaper</a></li>\n</ul>\n<h2>📢 GitHub Actions</h2>\n<p>아래와 같이 두개의 워크플로우로 나눠서 작성되었으며, 두 워크플로우는 서로 의존하지 않습니다.</p>\n<p>Workflows:</p>\n<ol>\n<li>Build and tag</li>\n<li>Docker image</li>\n</ol>\n<h3>Build and Tag</h3>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Build and tag\n\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> main <span class=\"token comment\"># Default release branch</span>\n    <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"!*\"</span>\n\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> build\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span>\n        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Checkout\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v2\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">fetch-depth</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Setup dotnet\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/setup<span class=\"token punctuation\">-</span>dotnet@v1\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">dotnet-version</span><span class=\"token punctuation\">:</span> 5.0.x\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> setup Node\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/setup<span class=\"token punctuation\">-</span>node@v2\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">node-version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'14'</span>\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> build ClientApp\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n          cd src/Sample.App/ClientApp\n          npm install\n          npm run build</span>\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Restore dependencies\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> dotnet restore\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Build\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> dotnet build <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>no<span class=\"token punctuation\">-</span>restore\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> package<span class=\"token punctuation\">-</span>version\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> grep '&lt;Version<span class=\"token punctuation\">></span>' &lt; src/Sample.App/Sample.App.csproj <span class=\"token punctuation\">|</span> echo \"<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>set<span class=\"token punctuation\">-</span>output name=version<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>$(sed 's/.<span class=\"token important\">*&lt;Version>\\(.*\\)&lt;\\/Version>/\\1/')\"</span>\n        <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> get_package_version\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> set<span class=\"token punctuation\">-</span>version  \n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> echo \"PACKAGE_VERSION=$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> steps.get_package_version.outputs.version <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\" <span class=\"token punctuation\">></span><span class=\"token punctuation\">></span> $GITHUB_ENV\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> package<span class=\"token punctuation\">-</span>version<span class=\"token punctuation\">-</span>to<span class=\"token punctuation\">-</span>git<span class=\"token punctuation\">-</span>tag\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> pkgdeps/git<span class=\"token punctuation\">-</span>tag<span class=\"token punctuation\">-</span>action@v2\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">github_token</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.GH_TOKEN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">github_repo</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> github.repository <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> env.PACKAGE_VERSION <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">git_commit_sha</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> github.sha <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">git_tag_prefix</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"v\"</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Release Drafter\n        <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> release_drafter\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> release<span class=\"token punctuation\">-</span>drafter/release<span class=\"token punctuation\">-</span>drafter@v5\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">config-name</span><span class=\"token punctuation\">:</span> release<span class=\"token punctuation\">-</span>drafter.yml\n          <span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> env.PACKAGE_VERSION <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">GITHUB_TOKEN</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.GH_TOKEN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>빌드를 확인하고, <a href=\"https://semver.org\">Semver</a> 형식의 태그를 추가합니다.</p>\n<p>태그는 백엔드의 시작프로젝트로 설정되는 프로젝트의 버전 <code class=\"language-text\">Version</code> 요소를 참조합니다.</p>\n<p>백엔드의 시작 프로젝트로 설정되는 프로젝트 파일(.csproj)에 반드시 <code class=\"language-text\">&lt;Version></code> 요소가 존재해야 합니다.</p>\n<p>예)</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Version</span><span class=\"token punctuation\">></span></span>1.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Version</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>빌드, 태그 액션은 하나의 작업으로 구성되어 있고, 작업은 여러 단계로 구성됩니다.</p>\n<p>액션은 메인 브랜치에 커밋이 전송되었을 때 시작됩니다.\n메인 브랜치에 태그가 전송된 경우에는 시작되지 않습니다.</p>\n<p>작업은 아래 단계가 순서대로 실행됩니다.</p>\n<ol>\n<li>체크아웃\n메인 브랜치의 내용을 복제합니다.</li>\n<li>.NET 5 도구를 설치합니다.</li>\n<li>Nodejs 도구를 설치합니다.</li>\n<li>클라이언트 응용프로그램 디렉터리에서 npm 패키지를 설치하고, npm run build 스크립트를 실행해서 클라이언트 응용프로그램을 번들링합니다.</li>\n<li>dotnet 의존 패키지를 설치합니다.</li>\n<li>dotnet 프로젝트를 빌드합니다.</li>\n<li>백엔드 시작 프로젝트의 버전을 환경변수에 저장합니다.</li>\n<li>환경변수에 저장된 버전값으로 태그를 작성합니다. <code class=\"language-text\">git tag</code></li>\n<li>작성된 태그와 연결된 릴리즈 초안을 작성합니다.</li>\n</ol>\n<h3>Docker image</h3>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> docker image\n\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">'v*.*.*'</span>\n\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">docker</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span>\n        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Checkout\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v2\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">fetch-depth</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n      <span class=\"token punctuation\">-</span>\n        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Docker meta\n        <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> meta\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> docker/metadata<span class=\"token punctuation\">-</span>action@v3\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token comment\"># list of Docker images to use as base name for tags</span>\n          <span class=\"token key atrule\">images</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n            ${{ secrets.DOCKER_REGISTRY_URI }}/${{ github.repository }}</span>\n          <span class=\"token comment\"># generate Docker tags based on the following events/attributes</span>\n          <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n            type=schedule\n            type=ref,event=branch\n            type=ref,event=pr\n            type=semver,pattern={{version}}\n            type=semver,pattern={{major}}.{{minor}}\n            type=semver,pattern={{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}\n            type=sha</span>\n          <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n            org.opencontainers.image.title=Sample File Share\n            org.opencontainers.image.description=File sharing sample web app\n            org.opencontainers.image.vendor=bbonkr</span>\n\n      <span class=\"token punctuation\">-</span>\n        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Set up QEMU\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> docker/setup<span class=\"token punctuation\">-</span>qemu<span class=\"token punctuation\">-</span>action@v1\n\n      <span class=\"token punctuation\">-</span>\n        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Set up Docker Buildx\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> docker/setup<span class=\"token punctuation\">-</span>buildx<span class=\"token punctuation\">-</span>action@v1\n\n      <span class=\"token punctuation\">-</span>\n        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Login to Registry\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> docker/login<span class=\"token punctuation\">-</span>action@v1 \n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">registry</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.DOCKER_REGISTRY_URI <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.DOCKER_REGISTRY_USERNAME <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.DOCKER_REGISTRY_PASSWORD <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">-</span>\n        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Build and push\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> docker/build<span class=\"token punctuation\">-</span>push<span class=\"token punctuation\">-</span>action@v2\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">context</span><span class=\"token punctuation\">:</span> .\n          <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> github.event_name <span class=\"token tag\">!=</span> 'pull_request' <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> steps.meta.outputs.tags <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> steps.meta.outputs.labels <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>메인 브랜치에 태그가 전송되면 도커 이미지를 빌드한 후 레지스트리에 새 이미지를 전송합니다.</p>\n<p>도커 이미지의 버전은 액션 트리거인 태그가 사용됩니다.</p>\n<p>빌드, 태그 액션은 하나의 작업으로 구성되어 있고, 작업은 여러 단계로 구성됩니다.</p>\n<p>액션은 저장소에 <code class=\"language-text\">v*.*.*</code> 형식의 태그가 전송되었을 때 시작됩니다.</p>\n<p>작업은 아래 단계가 순서대로 실행됩니다.</p>\n<ol>\n<li>체크아웃\n메인 브랜치의 내용을 복제합니다.</li>\n<li>도커 메타데이터를 수집합니다.</li>\n<li>도커 이미지를 빌드하기 위해 QEMU 도구를 설치합니다.</li>\n<li>도커 이미지를 빌드하기 위해 Buildx 도구를 설치합니다.</li>\n<li>레지스트리에 로그인합니다.</li>\n<li>도커 이미지를 빌드하고, 인증된 레지스트리에 이미지를 게시합니다.</li>\n</ol>\n<h2>👏 Conclusion</h2>\n<p>이렇게 구성해두면, 버전별 출시정보와 도커 이미지를 레지스트리에서 확인할 수 있습니다.</p>","frontmatter":{"title":"GitHub Actions Sample","date":"July 11, 2021","description":null,"categories":["howto"],"tags":["github","github actions","dotnet","react","typescript"],"github":null,"featuredImage":null,"draft":null,"comments":null}},"previous":{"fields":{"slug":"/2021/02/14/github-action-electron-release/"},"frontmatter":{"title":"Electron Release with GitHub Action","draft":null,"comments":null,"featuredImage":null}},"next":{"fields":{"slug":"/2021/11/09/net-sdk를-설치한-후-net-sdk-목록이-비어-있습니다/"},"frontmatter":{"title":".NET SDK를 설치한 후 .NET SDK 목록이 비어 있습니다","draft":null,"comments":null,"featuredImage":null}}},"pageContext":{"id":"0d8d6727-9bbd-5e53-8c09-c43003bef9f7","previousPostId":"03318dcd-cee9-574d-a873-4633bba80d36","nextPostId":"503086cd-1eb8-5396-bef2-78a13f1c447a"}},
    "staticQueryHashes": ["3068608076","3199328057"]}