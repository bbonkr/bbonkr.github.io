{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/2021/02/14/github-action-electron-release/",
    "result": {"data":{"site":{"siteMetadata":{"title":"<bbon />"}},"markdownRemark":{"id":"03318dcd-cee9-574d-a873-4633bba80d36","excerpt":"Electron 으로 작성된 응용 프로그램을 Windows, Macos 실행파일로 빌드하고, GitHub Release 에서 다운로드 가능한 상태로 준비하는 과정을 자동화한 워크플로우를 회고합니다. GitHub Actions GitHub…","html":"<p>Electron 으로 작성된 응용 프로그램을 Windows, Macos 실행파일로 빌드하고, GitHub Release 에서 다운로드 가능한 상태로 준비하는 과정을 자동화한 워크플로우를 회고합니다.</p>\n<h2>GitHub Actions</h2>\n<p>GitHub 에서 제공하는 워크 플로우 자동화 도구입니다.</p>\n<p>활용해서 여러가지 자동화를 시도할 수 있습니다.</p>\n<p><code class=\"language-text\">Build</code>, <code class=\"language-text\">Release</code> 두 개의 액션으로 구성했습니다.</p>\n<p><code class=\"language-text\">Release</code> 액션은 <code class=\"language-text\">Build</code> 액션에 의존하고 있습니다.</p>\n<p>모든 단계가 문제없이 실행되면, main 브랜치에 새로운 태그가 작성되고, GitHub Release 에 새로 작성된 태그에 해당하는 Electron 응용 프로그램이 다운로드가 준비된 상태로 비공개로 작성됩니다.</p>\n<p>간략한 흐름은 아래와 같습니다.</p>\n<ol>\n<li>main 브랜치에 커밋이 전송됩니다.</li>\n<li>Build 액션이 실행됩니다.\n<ol>\n<li>Ubuntu 에 Node.js 환경을 준비합니다.</li>\n<li>npm build 스크립트를 실행합니다.</li>\n<li>git tag를 작성합니다.</li>\n<li>GitHub Release 를 작성합니다.</li>\n<li><code class=\"language-text\">upload-assets</code> 이벤트를 실행합니다.</li>\n</ol>\n</li>\n<li>Release 액션이 실행됩니다. Macos 와 Windows 에서 아래 단계가 각각 실행됩니다.</li>\n<li>Node.js 환경을 준비합니다.</li>\n<li>npm pack 스크립트를 실행합니다.</li>\n<li>GitHub Release 에 응용프로그램을 업로드합니다.</li>\n</ol>\n<h3>⚙ Job: Build</h3>\n<p>main 브랜치에 커밋이 푸쉬되면 실행되는 GitHub Action 입니다.\n<a href=\"https://github.com/bbonkr/renameapp/blob/main/.github/workflows/build.yml\">.github/workflows/build.yml 보기</a></p>\n<p>build Job 은 <code class=\"language-text\">Checkout</code>, <code class=\"language-text\">Install Node.js, Npm</code>, <code class=\"language-text\">Install Dependencies</code>, <code class=\"language-text\">Build</code>, <code class=\"language-text\">package-version</code>, <code class=\"language-text\">package-version-to-git-tag</code>, <code class=\"language-text\">Release Drafter</code>, <code class=\"language-text\">Check Upload Url</code>, <code class=\"language-text\">Repository Dispatch</code> 단계로 구성되어 있습니다.</p>\n<p>Ubuntu 에서 실행합니다.</p>\n<h4>👞 step: Checkout</h4>\n<p>원격 저장소에서 코드를 내려받습니다.</p>\n<h4>👞 step: Install Node.js, Npm</h4>\n<p>Node.js 환경을 구성합니다.</p>\n<p>v12 Node.js 를 사용합니다.</p>\n<h4>👞 step: Install Dependencies</h4>\n<p>package.json 에 작성된 패키지를 설치합니다.</p>\n<h4>👞 step: Build</h4>\n<p>npm build 스크립트를 실행합니다.</p>\n<h4>👞 step: package-version</h4>\n<p>package.json 파일에 작성된 버전 값을 PACKAGE_VERION 환경변수로 설정합니다.</p>\n<h4>👞 step: package-version-to-git-tag</h4>\n<p><a href=\"https://github.com/pkgdeps/git-tag-action\"><code class=\"language-text\">pkgdeps/git-tag-action</code></a> 액션으로 git tag 를 작성합니다.</p>\n<p>package.json 파일의 버전과 git tag 를 동기화하기 위해 사용합니다.</p>\n<p><code class=\"language-text\">package-version</code> 단계에서 얻은 버전을 사용합니다.</p>\n<h4>👞 step: Release Drafter</h4>\n<p><a href=\"https://github.com/release-drafter/release-drafter\"><code class=\"language-text\">release-drafter/release-drafter</code></a> 액션으로 작성된 git tag 에 대한 GitHub Release 를 작성합니다.</p>\n<p>GitHub Release의 본문에 변경사항 정의된 템플릿 기반의 내용으로 작성됩니다.</p>\n<p><code class=\"language-text\">package-version</code> 단계에서 얻은 버전을 사용합니다.</p>\n<p>작성된 GitHub Relase 는 Draft 상태입니다.</p>\n<p>실행 파일이 업로드된 후 직접 상태를 변경해서 공개하도록 하고 싶습니다.</p>\n<h4>👞 step: Check Upload Url</h4>\n<p><code class=\"language-text\">Release Drafter</code> 단계의 출력값을 확인합니다.</p>\n<p><code class=\"language-text\">Release Drafter</code> 단계에서 작성된 GitHub Release 의 첨부파일 <small>Assets</small> 업로드 경로를 확인하기 위해 추가된 단계입니다.</p>\n<h4>👞 step: Repository Dispatch</h4>\n<p><a href=\"https://github.com/peter-evans/repository-dispatch\"><code class=\"language-text\">peter-evans/repository-dispatch</code></a> 액션으로 지정된 GitHub 저장소를 대상으로 사용자 정의 이벤트를 실행합니다.</p>\n<blockquote>\n<p><code class=\"language-text\">peter-evans/repository-dispatch</code> 액션은 GitHub api 중 web hook 을 사용합니다.</p>\n</blockquote>\n<p>이벤트 형식은 <code class=\"language-text\">upload-assets</code> 으로 지정합니다.\n웹 훅을 요청할 때, 요청 본문으로 <code class=\"language-text\">Release Drafter</code> 단계의 출력값중 <code class=\"language-text\">upload_url</code> 을 전송합니다.</p>\n<h3>⚙ Job: Release</h3>\n<p>저장소에 웹 훅 이벤트가 요청되면 실행되는 GitHub Action 입니다.\n<a href=\"https://github.com/bbonkr/renameapp/blob/main/.github/workflows/release.yml\">.github/workflows/release.yml 보기</a></p>\n<p>구독하는 이벤트 형식은 <code class=\"language-text\">upload-assets</code> 입니다.</p>\n<p>Release Job 은 <code class=\"language-text\">Context</code>, <code class=\"language-text\">Verify Upload Url</code>, <code class=\"language-text\">Checkout</code>, <code class=\"language-text\">Install Node.js, Npm</code>, <code class=\"language-text\">Install dependencies</code>, <code class=\"language-text\">Pack</code>, <code class=\"language-text\">Upload Assets to Release with a wildcard</code> 단계로 구성되어 있습니다.</p>\n<p>Macos, Windows 에서 실행됩니다.\n각 단계는 지정된 OS 별로 한번씩 두번 실행됩니다.</p>\n<h4>👞 step: Context</h4>\n<p>GitHub Action 으로 제공되는 기본 데이터를 확인해보고 싶어서 추가한 단계입니다.</p>\n<h4>👞 step: Verify Upload Url</h4>\n<p>웹 훅으로 입력된 요청 본문이 정상적으로 전달되는지 확인해보고 싶어서 추가한 단계입니다. <code class=\"language-text\">Conext</code> 단계에서 동일한 값을 확인할 수 있습니다.</p>\n<h4>👞 step: Checkout</h4>\n<p>원격 저장소에서 코드를 내려받습니다.</p>\n<h4>👞 step: Install Node.js, Npm</h4>\n<p>Node.js 환경을 구성합니다.</p>\n<p>v12 Node.js 를 사용합니다.</p>\n<h4>👞 step: Install dependencies</h4>\n<p>package.json 에 작성된 패키지를 설치합니다.</p>\n<h4>👞 step: Pack</h4>\n<p>npm pack 스크립트를 실행합니다.</p>\n<p>electron 으로 작성된 실행파일이 packages 디렉터리에 작성됩니다.</p>\n<h4>👞 step: Upload Assets to Release with a wildcard</h4>\n<p>packages 디렉터리에 작성된 실행파일을 이전 Build 액션에서 전달한 업로드 경로를 사용해서 Release Assets 로 업로드합니다.</p>\n<h2>📋 Workflows</h2>\n<p><a href=\"https://github.com/bbonkr/renameapp/actions\">Actions: bbonkr/renameapp</a> 페이지에서 실행된 워크플로우를 확인할 수 있습니다.</p>\n<h2>🧰 Releases</h2>\n<p><a href=\"https://github.com/bbonkr/renameapp/releases\">Releases: bbonkr/renameapp</a> 페이지에서 작성된 GItHub Release 를 확인할 수 있습니다.</p>\n<h2>📢 Conclusion</h2>\n<p>가능하면 많은 부분을 자동화해서 꼭 필요한 일에 집중할 수 있는 환경을 준비하는 것은 매우 중요한 일이라고 생각됩니다.</p>\n<p>이렇게 게시 워크플로우를 자동화해두면 이번 게시에 뭐가 변경되었는지를 작성하는 시간을 줄일 수 있고, 게시에 다운로그 가능한 파일을 누락하는 실수도 없습니다.</p>\n<p>지속적으로 더 좋은 워크플로우를 생각하고, 구성하고 회고하도록 하겠습니다.</p>\n<p>저와 유사한 워크플로우를 자동화하려고 진행하시는 분에게 도움이 되면 좋겠습니다.</p>","frontmatter":{"title":"Electron Release with GitHub Action","date":"February 14, 2021","description":null,"categories":["howto"],"tags":["github","github-actions","electron","ci-cd"],"github":{"owner":"bbonkr","repo":"renameapp"},"image":null,"draft":null,"comments":null}},"previous":{"fields":{"slug":"/2021/01/03/kr-bbon-entity-framework-core-extensions-package/"},"frontmatter":{"title":"kr.bbon.EntityFrameworkCore.Extensions Package","image":null,"draft":null,"comments":null}},"next":{"fields":{"slug":"/2021/07/11/git-hub-actions-sample-1/"},"frontmatter":{"title":"GitHub Actions Sample","image":null,"draft":null,"comments":null}}},"pageContext":{"id":"03318dcd-cee9-574d-a873-4633bba80d36","previousPostId":"4631eb4b-5e9e-584c-b0f2-3d7b7ba27a26","nextPostId":"0d8d6727-9bbd-5e53-8c09-c43003bef9f7"}},
    "staticQueryHashes": ["2568428658","3199328057"]}