{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/2021/12/15/change-the-web-application-target-framework-from-net-5-to-net-6/",
    "result": {"data":{"site":{"siteMetadata":{"title":"<bbon />","siteUrl":"https://bbon.me"}},"markdownRemark":{"id":"cf84bc59-1cff-57db-9649-3ce691b4d96f","excerpt":".NET 5 웹 응용프로그램을 .NET 6 웹 응용프로그램으로 변환하고, 관련 내용을 요약해서 작성했습니다. Target Project GitHub: bbonkr/bing-wallpaper 웹 응용프로그램의 대상 프레임워크를 .NET 5 에서 .NET…","html":"<p>.NET 5 웹 응용프로그램을 .NET 6 웹 응용프로그램으로 변환하고, 관련 내용을 요약해서 작성했습니다.</p>\n<h2>Target Project</h2>\n<p><a href=\"https://github.com/bbonkr/bing-wallpaper\">GitHub: bbonkr/bing-wallpaper</a> 웹 응용프로그램의 대상 프레임워크를 .NET 5 에서 .NET 6(으)로 변경합니다.</p>\n<h2>Requirements</h2>\n<ul>\n<li>대상 프레임워크를 .NET 6(으)로 변경</li>\n<li>Program.cs 파일의 내용을 최상위 문 (Top level statements) 으로 재작성</li>\n<li>파일 범위 네임스페이스 (File scoped namespace) 를 사용</li>\n</ul>\n<h2>Task logs</h2>\n<h3>Change target framework</h3>\n<p>.NET 5 웹 응용프로그램을 .NET 6 웹 응용프로그램으로 변경하는 작업은 다른 이슈가 없으면 매우 간단한 작업입니다.</p>\n<p>프로젝트 파일을 편집기로 열고, TargetFramework 요소의 값을 <code class=\"language-text\">net5.0</code> 에서 <code class=\"language-text\">net6.0</code> 으로 변경하면 기본 작업은 끝입니다.</p>\n<blockquote>\n<p>사용중인 (의존) 패키지가 .NET 6 에서 사용할 수 없다면 문제가 발생할 수 있으므로, 대상 프레임워크를 변경하기 전에 사용중인 (의존) 패키지가 .NET 6 에서 사용가능한지 검토후 진행여부를 결정해야 합니다.</p>\n</blockquote>\n<h3>Top level statements</h3>\n<p>.NET 6 (을)를 대상으로 웹 응용프로그램 프로젝트를 작성하면, Program.cs 파일에 최상위 문으로 웹응용프로그램(WebApplication) 구성하는 코드가 제공됩니다.</p>\n<p>.NET 5 로 작성된 웹 응용프로그램 코드도 매우 간편하게 최상위 문을 사용하도록 코드를 변경할 수 있습니다.</p>\n<p>Program.cs 파일의 기존 코드는 그대로 남겨두고, 파일이 마지막 줄에 작성을 시작합니다.</p>\n<p>먼저, 웹 응용프로그램 빌더 인스턴스를 작성합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> WebApplication<span class=\"token punctuation\">.</span><span class=\"token function\">CreateBuilder</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>편의를 위해 구역을 설정합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> WebApplication<span class=\"token punctuation\">.</span><span class=\"token function\">CreateBuilder</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// configure service</span>\n<span class=\"token comment\">// [1]</span>\n<span class=\"token comment\">// configure</span>\n<span class=\"token comment\">// [2]</span>\n<span class=\"token comment\">// run</span>\n<span class=\"token comment\">// [3]</span></code></pre></div>\n<p>[1] 부분에는 <code class=\"language-text\">Startup.cs</code> 파일의 <code class=\"language-text\">ConfigureServices</code> 메서드의 코드를 가져옵니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Startup</span> \n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ConfigureServices</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IServiceCollection</span> services<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 생략</span>\n        services<span class=\"token punctuation\">.</span><span class=\"token function\">AddControllersWithViews</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 생략</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">ConfigureServices</code> 메서드의 내용을 가져온 후 <code class=\"language-text\">builder.Services</code> 속성을 사용해서 아래와 같이 작성될 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> WebApplication<span class=\"token punctuation\">.</span><span class=\"token function\">CreateBuilder</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// configure service</span>\n<span class=\"token comment\">// 생략</span>\nbuilder<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token function\">AddControllersWithViews</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 생략</span>\n<span class=\"token comment\">// configure</span>\n<span class=\"token comment\">// [2]</span>\n<span class=\"token comment\">// run</span>\n<span class=\"token comment\">// [3]</span></code></pre></div>\n<p>[2] 부분에는 <code class=\"language-text\">Startup.cs</code> 파일의 <code class=\"language-text\">Configure</code> 메서드의 코드를 가져옵니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Startup</span> \n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IApplicationBuilder</span> app<span class=\"token punctuation\">,</span> <span class=\"token class-name\">IWebHostEnvironment</span> env<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 생략</span>\n        app<span class=\"token punctuation\">.</span><span class=\"token function\">UseStaticFiles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        app<span class=\"token punctuation\">.</span><span class=\"token function\">UseRouting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        app<span class=\"token punctuation\">.</span><span class=\"token function\">UseAuthorization</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        app<span class=\"token punctuation\">.</span><span class=\"token function\">UseEndpoints</span><span class=\"token punctuation\">(</span>endpoints <span class=\"token operator\">=></span>\n        <span class=\"token punctuation\">{</span>\n            endpoints<span class=\"token punctuation\">.</span><span class=\"token function\">MapDefaultControllerRoute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     \n        <span class=\"token comment\">// 생략</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">Configure</code> 메서드의 내용을 가져온 후 아래와 같이 작성될 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> WebApplication<span class=\"token punctuation\">.</span><span class=\"token function\">CreateBuilder</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// configure service</span>\n<span class=\"token comment\">// 생략</span>\nbuilder<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token function\">AddControllersWithViews</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 생략</span>\n<span class=\"token comment\">// configure</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> app <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 생략</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseStaticFiles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseRouting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseAuthorization</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseEndpoints</span><span class=\"token punctuation\">(</span>endpoints <span class=\"token operator\">=></span>\n<span class=\"token punctuation\">{</span>\n    endpoints<span class=\"token punctuation\">.</span><span class=\"token function\">MapDefaultControllerRoute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     \n<span class=\"token comment\">// 생략</span>\n<span class=\"token comment\">// run</span>\n<span class=\"token comment\">// [3]</span></code></pre></div>\n<blockquote>\n<p>다른 구성은 app.Services 속성, app.Environment 속성을 참조하면 동일하게 코드를 작성할 수 있습니다.</p>\n</blockquote>\n<p>[3] 부분에는 <code class=\"language-text\">Program.cs</code> 에 작성되어 있는 Main 메서드의 내용을 가져옵니다.</p>\n<p>완성된 <code class=\"language-text\">Program.cs</code> 파일은 아래와 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> WebApplication<span class=\"token punctuation\">.</span><span class=\"token function\">CreateBuilder</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// configure service</span>\n<span class=\"token comment\">// 생략</span>\nbuilder<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token function\">AddControllersWithViews</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 생략</span>\n<span class=\"token comment\">// configure</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> app <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 생략</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseStaticFiles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseRouting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseAuthorization</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseEndpoints</span><span class=\"token punctuation\">(</span>endpoints <span class=\"token operator\">=></span>\n<span class=\"token punctuation\">{</span>\n    endpoints<span class=\"token punctuation\">.</span><span class=\"token function\">MapDefaultControllerRoute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     \n<span class=\"token comment\">// 생략</span>\n<span class=\"token comment\">// run</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이후, <code class=\"language-text\">Program.cs</code> 파일의 기존 내용 namespace 포함해서 <code class=\"language-text\">Program</code> 클래스를 제거합니다.</p>\n<h3>Use File scoped namespace</h3>\n<p>나머지 파일을 하나씩 열어서 네임스페이스 블럭을 파일 범위 네임스페이스로 변경합니다.</p>\n<blockquote>\n<p>한번에 적용하는 방법을 아직 못찾아서 하나씩 변경했습니다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">SomeNamesapce</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 생략</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>아래와 같이 블럭을 제거하는 작업입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">SomeNamesapce</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 생략</span></code></pre></div>\n<blockquote>\n<p>Visual Studio 를 사용중이면, namespace 이름에서 컨텍스트 메뉴 (Ctrl + .)를 확인하면 파일 범위 네임스페이스로 변경 메뉴가 있습니다.</p>\n</blockquote>\n<h3>Dockerfile</h3>\n<p>도커 이미지 빌드를 사용중이면, 빌드 이미지와 런타임 이미지를 변경합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> mcr.microsoft.com/dotnet/sdk:5.0 <span class=\"token keyword\">AS</span> build</span>\n<span class=\"token comment\"># 생략</span>\n<span class=\"token instruction\"><span class=\"token keyword\">FROM</span> mcr.microsoft.com/dotnet/aspnet:5.0 <span class=\"token keyword\">AS</span> runtime</span>\n<span class=\"token comment\"># 생략</span></code></pre></div>\n<p>아래와 같이 .NET 6 환경으로 변경합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> mcr.microsoft.com/dotnet/sdk:6.0 <span class=\"token keyword\">AS</span> build</span>\n<span class=\"token comment\"># 생략</span>\n<span class=\"token instruction\"><span class=\"token keyword\">FROM</span> mcr.microsoft.com/dotnet/aspnet:6.0 <span class=\"token keyword\">AS</span> runtime</span>\n<span class=\"token comment\"># 생략</span></code></pre></div>\n<h3>CI/CD Environment</h3>\n<p>GitHub Action 또는 Azure pipeline 등 다른 CI/CD 를 사용주이면 작업 정의에서 환경 구성시 사용되는 .NET SDK 버전을 .NET 6 (으)로 변경합니다.</p>\n<p>GitHub Actions 의 <code class=\"language-text\">actions/setup-dotnet@v1</code> 패키지의 환경변수 값을 6.0.x 로 지정합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># 생략</span>\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> build\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token comment\"># 생략</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Setup dotnet\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/setup<span class=\"token punctuation\">-</span>dotnet@v1\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">dotnet-version</span><span class=\"token punctuation\">:</span> 6.0.x\n      <span class=\"token comment\"># 생략</span></code></pre></div>\n<h2>Conclusion</h2>\n<p>.NET 6 (으)로 대상 프레임워크 변경만으로 성능향상이 있다고 하니, 시간되실 때 변경해보시면 좋을 것 같습니다.</p>\n<p>실제 작성된 .NET 6 (으)로 변경작업을 확인하고 싶으시면 <a href=\"https://github.com/bbonkr/bing-wallpaper/tree/feature/dotnet6\">GitHub: bbonkr/bing-images feature/dotnet6 branch</a> 에서 코드 변경사항을 참조하십시오.</p>","frontmatter":{"title":"Change the web application target framework from .NET 5 to .NET 6","date":"December 15, 2021","description":null,"categories":["blog","computing","repository"],"tags":["dotnet","dotnet 5","dotnet 6","github","github-repository"],"github":{"owner":"bbonkr","repo":"bing-wallpaper"},"featuredImage":null,"draft":null,"comments":null}},"previous":{"fields":{"slug":"/2021/12/14/npm-bbon-react-calendar-package/"},"frontmatter":{"title":"NPM @bbon/react-calendar package","draft":null,"comments":null,"featuredImage":null}},"next":{"fields":{"slug":"/2021/12/18/many-to-many-relationship-on-entity-framework-core-6/"},"frontmatter":{"title":"Many to many relationship on EntityFrameworkCore 6","draft":null,"comments":null,"featuredImage":null}}},"pageContext":{"id":"cf84bc59-1cff-57db-9649-3ce691b4d96f","previousPostId":"2b8f3299-ae49-5f6a-8a82-e175d017c4bf","nextPostId":"e786fe19-c9d7-5970-afb1-65d966a42ff2"}},
    "staticQueryHashes": ["3068608076","3199328057"]}