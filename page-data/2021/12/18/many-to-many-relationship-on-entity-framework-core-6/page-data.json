{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/2021/12/18/many-to-many-relationship-on-entity-framework-core-6/",
    "result": {"data":{"site":{"siteMetadata":{"title":"<bbon />","siteUrl":"https://bbon.me"}},"markdownRemark":{"id":"e786fe19-c9d7-5970-afb1-65d966a42ff2","excerpt":"EntityFrameworkCore 6 에서 다대다 관계 구성이 향상되었다고 해서 관련 내용을 확인했습니다. 데이터 입출력시 중간 테이블을 거치지 않고 구현이 가능합니다. GitHub: bbonkr/sample.ef.mtom…","html":"<p>EntityFrameworkCore 6 에서 다대다 관계 구성이 향상되었다고 해서 관련 내용을 확인했습니다.</p>\n<p>데이터 입출력시 중간 테이블을 거치지 않고 구현이 가능합니다.</p>\n<p><a href=\"https://github.com/bbonkr/sample.ef.mtom\">GitHub: bbonkr/sample.ef.mtom</a> 저장소에서 코드를 확인할 수 있습니다.</p>\n<h2>예제 테이블</h2>\n<h3>Student</h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"center\">Nullable</th>\n<th align=\"center\">Constaint</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">Id</td>\n<td align=\"center\">NN</td>\n<td align=\"center\">PK</td>\n</tr>\n<tr>\n<td align=\"left\">Name</td>\n<td align=\"center\">NN</td>\n<td align=\"center\"></td>\n</tr>\n</tbody>\n</table>\n<h3>Cource</h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"center\">Nullable</th>\n<th align=\"center\">Constaint</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">Id</td>\n<td align=\"center\">NN</td>\n<td align=\"center\">PK</td>\n</tr>\n<tr>\n<td align=\"left\">Title</td>\n<td align=\"center\">NN</td>\n<td align=\"center\"></td>\n</tr>\n</tbody>\n</table>\n<h3>Enrollment</h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"center\">Nullable</th>\n<th align=\"center\">Constaint</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">StudentId</td>\n<td align=\"center\">NN</td>\n<td align=\"center\">PK</td>\n</tr>\n<tr>\n<td align=\"left\">CourseId</td>\n<td align=\"center\">NN</td>\n<td align=\"center\">PK</td>\n</tr>\n</tbody>\n</table>\n<h2>엔티티 타입 구성</h2>\n<h3>.net core 3.1</h3>\n<p><a href=\"https://github.com/bbonkr/sample.ef.mtom/tree/features/net3\">features/net3</a> 브랜치에서 관련 코드를 확인할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EnrollmentEntityTypeConfiguration</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IEntityTypeConfiguration<span class=\"token punctuation\">&lt;</span>Enrollment<span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EntityTypeBuilder<span class=\"token punctuation\">&lt;</span>Enrollment<span class=\"token punctuation\">></span></span> builder<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        builder<span class=\"token punctuation\">.</span><span class=\"token function\">HasKey</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">.</span>StudentId<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">.</span>CourseId <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        builder<span class=\"token punctuation\">.</span><span class=\"token function\">Property</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>StudentId<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">IsRequired</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        builder<span class=\"token punctuation\">.</span><span class=\"token function\">Property</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>CourseId<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">IsRequired</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        builder<span class=\"token punctuation\">.</span><span class=\"token function\">HasOne</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Student<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">WithMany</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Enrollments<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">HasForeignKey</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>StudentId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        builder<span class=\"token punctuation\">.</span><span class=\"token function\">HasOne</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Course<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">WithMany</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Enrollments<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">HasForeignKey</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>CourseId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>.NET 5</h3>\n<p><a href=\"https://github.com/bbonkr/sample.ef.mtom/tree/features/net5\">features/net5</a> 브랜치에서 관련 코드를 확인할 수 있습니다.</p>\n<p>.net core 3.1 구성에서 변경사항이 없습니다.</p>\n<h3>.NET 6</h3>\n<p>EnrollmentEntityTypeConfiguration 클래스를 제거하고, CourseEntityTypeConfiguration 클래스에서 다대다 관계를 설정합니다.</p>\n<p><a href=\"https://github.com/bbonkr/sample.ef.mtom/tree/features/net6\">features/net6</a> 브랜치 혹은 main 브랜치에서 관련 코드를 확인할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CourseEntityTypeConfiguration</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IEntityTypeConfiguration<span class=\"token punctuation\">&lt;</span>Course<span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EntityTypeBuilder<span class=\"token punctuation\">&lt;</span>Course<span class=\"token punctuation\">></span></span> builder<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        builder<span class=\"token punctuation\">.</span><span class=\"token function\">HasKey</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        builder<span class=\"token punctuation\">.</span><span class=\"token function\">Property</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">IsRequired</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">ValueGeneratedOnAdd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        builder<span class=\"token punctuation\">.</span><span class=\"token function\">Property</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Title<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">IsRequired</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        builder<span class=\"token punctuation\">.</span><span class=\"token function\">HasMany</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Students<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">WithMany</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Courses<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">UsingEntity</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Enrollment<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>\n                j <span class=\"token operator\">=></span> j<span class=\"token punctuation\">.</span><span class=\"token function\">HasOne</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">WithMany</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Enrollments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">HasForeignKey</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>StudentId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                j <span class=\"token operator\">=></span> j<span class=\"token punctuation\">.</span><span class=\"token function\">HasOne</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Course<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">WithMany</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Enrollments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">HasForeignKey</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>CourseId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                j <span class=\"token operator\">=></span>\n                <span class=\"token punctuation\">{</span>\n                    j<span class=\"token punctuation\">.</span><span class=\"token function\">HasKey</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">.</span>StudentId<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">.</span>CourseId <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>엔티티 타입 구성을 변경한 후 마이그레이션 코드를 작성해도 변경사항이 없습니다. 엔티티 타입 구성을 변경한 후 작성된 마이그레이션 코드: <a href=\"https://github.com/bbonkr/sample.ef.mtom/blob/features/net6/src/Sample.Data.SqlServer/Migrations/20211218051811_Change%20mtom.cs\">20211218051811_Change mtom</a></p>\n</blockquote>\n<h2>사용</h2>\n<h3>.net core 3.1</h3>\n<p>학생의 수업정보를 입력합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> enrollments <span class=\"token operator\">=</span> Context<span class=\"token punctuation\">.</span>Courses\n    <span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> index <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Enrollment</span>\n    <span class=\"token punctuation\">{</span>\n        CourseId <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nstudent<span class=\"token punctuation\">.</span>Enrollments\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddRange</span><span class=\"token punctuation\">(</span>enrollments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>학생 정보와 학생의 수업을 쿼리합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> students <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Context<span class=\"token punctuation\">.</span>Students\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Include</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Enrollments<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>student <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span>\n    <span class=\"token punctuation\">{</span>\n        Name <span class=\"token operator\">=</span> student<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span>\n        Courses <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>Enrollments<span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>enrollment <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span>\n        <span class=\"token punctuation\">{</span>\n            Title <span class=\"token operator\">=</span> enrollment<span class=\"token punctuation\">.</span>Course<span class=\"token punctuation\">.</span>Title<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>.NET 5</h3>\n<p>변경사항이 없습니다.</p>\n<h3>.NET 6</h3>\n<p>학생의 수업정보를 입력합니다.</p>\n<p>Enrollments 를 사용해서 입력하지 않고, Courses 사용해서 입력할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> coursesToEnroll <span class=\"token operator\">=</span> Context<span class=\"token punctuation\">.</span>Courses\n    <span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> index <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nstudent<span class=\"token punctuation\">.</span>Courses<span class=\"token punctuation\">.</span><span class=\"token function\">AddRange</span><span class=\"token punctuation\">(</span>coursesToEnroll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>학생 정보와 수업정보를 쿼리합니다.</p>\n<p>Enrollments 를 사용하지 않고, Courses 를 쿼리할 수 있어 직관적으로 사용할 수 있다고 생각됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> students <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Context<span class=\"token punctuation\">.</span>Students\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Include</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Courses<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>student <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span>\n    <span class=\"token punctuation\">{</span>\n        Name <span class=\"token operator\">=</span> student<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span>\n        Courses <span class=\"token operator\">=</span> student<span class=\"token punctuation\">.</span>Courses<span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>course <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span>\n        <span class=\"token punctuation\">{</span>\n            Title <span class=\"token operator\">=</span> course<span class=\"token punctuation\">.</span>Title<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>그 외</h2>\n<h3>dotnet-ef tool</h3>\n<p>dotnet CLI 를 사용해서 dotnet 도구를 해당 프로젝트 범위에서 관리하려면, 매니페스트 파일을 먼저 작성해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ dotnet new tool-manifest</code></pre></div>\n<blockquote>\n<p>참조: <a href=\"https://www.nuget.org/packages/dotnet-ef/\">nuget: dotnet-ef</a> versions tab.</p>\n</blockquote>\n<p>.net core 3.1</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ dotnet tool <span class=\"token function\">install</span> --local dotnet-ef --version <span class=\"token number\">3.1</span>.22</code></pre></div>\n<p>.net 5</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ dotnet tool update --local dotnet-ef --version <span class=\"token number\">5.0</span>.13</code></pre></div>\n<p>.net 6</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ dotnet tool update --local dotnet-ef --version <span class=\"token number\">6.0</span>.1</code></pre></div>\n<h3>마이그레이션 코드 작성</h3>\n<p><code class=\"language-text\">Sample.App</code> 프로젝트를 시작프로젝트로 설정하고, AppDbContext 를 대상으로 <code class=\"language-text\">Sample.Data.SqlServer</code> 프로젝트에 마이그레이션 코드를 작성합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">cd</span> src/Sample.Data\n$ dotnet ef migrations <span class=\"token function\">add</span> <span class=\"token string\">\"Migrations name\"</span> --context AppDbContext --startup-project <span class=\"token punctuation\">..</span>/Sample.App --project <span class=\"token punctuation\">..</span>/Sample.Data.SqlServer </code></pre></div>\n<blockquote>\n<p>마이그레이션 코드를 다른 프로젝트에서 관리할 수 있습니다.</p>\n</blockquote>\n<h2>결론</h2>\n<p>EFCore 6 에서 드디어 다대다 관계의 구현이 정리되어, 문제없이 원하는 모양으로 설정할 수 있었습니다.</p>\n<p>그리고, 데이터 입출력도 직관적인 방식으로 구현이 가능해졌습니다.</p>","frontmatter":{"title":"Many to many relationship on EntityFrameworkCore 6","date":"December 18, 2021","description":null,"categories":["blog","computing","repository"],"tags":["dotnet","ef","efcore","entityframework","entityframeworkcore","github","github-repository"],"github":{"owner":"bbonkr","repo":"sample.ef.mtom"},"featuredImage":null,"draft":null,"comments":null}},"previous":{"fields":{"slug":"/2021/12/15/change-the-web-application-target-framework-from-net-5-to-net-6/"},"frontmatter":{"title":"Change the web application target framework from .NET 5 to .NET 6","draft":null,"comments":null,"featuredImage":null}},"next":{"fields":{"slug":"/2021/12/22/configure-end-of-line-when-using-git-for-multi-platform-development-teams/"},"frontmatter":{"title":"Configure end of line when using git for multi-platform development teams","draft":null,"comments":null,"featuredImage":null}}},"pageContext":{"id":"e786fe19-c9d7-5970-afb1-65d966a42ff2","previousPostId":"cf84bc59-1cff-57db-9649-3ce691b4d96f","nextPostId":"bd3f2e35-9ab6-51b8-ba71-46bdb816a741"}},
    "staticQueryHashes": ["3068608076","3199328057"]}