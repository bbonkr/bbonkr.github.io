{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/2022/10/24/new-cs-file-vscode-extension","result":{"data":{"site":{"siteMetadata":{"title":"<bbon />","siteUrl":"https://bbon.me"}},"markdownRemark":{"id":"a07e25e8-fa9b-5597-949e-f687c9b3269b","excerpt":"비주얼 스튜디오 코드 (Visual Studio Code…","html":"<p>비주얼 스튜디오 코드 (Visual Studio Code)는 매우 유용한 통합 개발 환경을 제공합니다.</p>\n<p>저는 타입스크립트 또는 자바스크립트로 작성하는 대부분의 코드를 비주얼 스튜디오 코드를 사용해서 작성합니다.</p>\n<p>주 사용 장치를 맥으로 변경하면서, 닷넷 프로젝트도 간혹 비주얼 스튜디오 코드를 사용해서 진행합니다. 맥용 비주얼 스튜디오가 조금 불편하기도 하고 (윈도우용 비주얼 스튜디오에 비해), 비주얼 스튜디오 코드가 더 익숙해져서 그런 것 같습니다.</p>\n<p>비주얼 스튜디오 코드에서 닷넷 프로젝트를 열고, 작업을 진행할 때 새 파일을 작성하면 빈 파일이 작성되어 매우 불편했습니다.</p>\n<p>비주얼 스튜디오에서 새 파일을 작성하면, 작성되는 파일이 위치하는 디렉터리 기반으로 네임스페이스를 작성해주는데, 비쥬얼 스튜디오 코드에서는 이 기능이 제공되지 않습니다.</p>\n<p>관련 확장을 설치하고 사용을 시도했으나, 마음에 드는 확장을 찾지 못했습니다.</p>\n<p>그래서, 비주얼 스튜디오 코드의 확장을 작성하는 방법을 확인하고, 원하는 기능을 구현해서 사용하기로 했습니다.</p>\n<h2>New CS File 확장</h2>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=bbonkr.kr-bbon-vscode-plugins-newcsfile\">New cs file</a> 페이지에서 관련 정보를 찾을 수 있습니다.</p>\n<h3>사용</h3>\n<p>비주얼 스튜디오 코드에서 닷넷 프로젝트를 열고, 커맨드 팔렛트에서 new cs file 명령을 찾거나, 워크 스페이스 파일 탐색기에서 폴더(디렉터리)를 선택하고 컨텍스트 메뉴를 열어 new cs file 명령을 실행합니다.</p>\n<p>디렉터리 다이얼로그가 열리면 파일을 추가할 디렉터리를 선택합니다.\n클래스 이름 입력창이 열리면, 추가하려는 클래스 (객체) 이름을 입력하고, 엔터키를 입력합니다.</p>\n<p>선택된 위치에 <code class=\"language-text\">클래스이름.cs</code> 파일이 작성되고, 작성된 파일에는 디렉터리 구조를 기반한 네임스페이스가 추가되어져 있습니다.</p>\n<p>작상된 파일의 내용:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Sample<span class=\"token punctuation\">.</span>Models</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestModel</span>\n    <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>기능</h3>\n<p>네임스페이스는 파일이 작성되는 디렉터리와 프로젝트 파일(.csproj)의 이름을 기반으로 작성됩니다.\n다만, 프로젝트 파일(.csproj)에 <code class=\"language-text\">&lt;DefaultNamespace></code> 요소가 있으면 그 값을 사용합니다.</p>\n<p>아래와 같은 구조일 때 Models 디렉터리가 선택되고 TestModel 이라는 클래스가 작성되는 파일의 예제입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"plaintext\"><pre class=\"language-plaintext\"><code class=\"language-plaintext\">- Sample           # directory\n  - Models         # directory\n    - TestModel    # 👈 Try to create file\n  - Sample.csproj  # project file</code></pre></div>\n<p>DefaultNamespace 요소가 없는 경우:</p>\n<p>TestModel 파일의 내용</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Sample<span class=\"token punctuation\">.</span>Models</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestModel</span>\n    <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>프로젝트 파일의 <code class=\"language-text\">DefaultNamespace</code> 요소가 <code class=\"language-text\">Sample.SpecialEdition</code> 인 경우:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Sample<span class=\"token punctuation\">.</span>SpecialEdition<span class=\"token punctuation\">.</span>Models</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestModel</span>\n    <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>제한사항</h3>\n<p>작업하려는 프로젝트가 열린 워크스페이스의 디렉터리와 파일이름은 알파벳 문자와 숫자로만 구성되어야 합니다.</p>\n<!--\n## 코드 리뷰\n\n[GitHub: bbonkr/vscode-extensions-new-cs-file](https://github.com/bbonkr/vscode-extensions-new-cs-file)\n-->\n<h2>게시</h2>\n<p>깃허브 액션으로 게시를 자동화합니다. 다만, 게시 시점을 조정하기 위해 깃허브 릴리즈가 게시될 때에만 비주얼 스튜디오 마켓플레이스에 게시합니다.</p>\n<p>GitHub actions</p>\n<ol>\n<li>기본 브랜치에 커밋이 전송됩니다.\n<ol>\n<li>코드를 체크아웃하고, 노드 환경을 구성한 후 의존 패키지를 설치하고, 지정된 npm 스크립트를 실행합니다.</li>\n<li>package.json 의 version 값으로 깃 태그를 검색합니다.\n<ol>\n<li>version에 해당하는 깃 태그가 있는 경우 워크플로우는 종료됩니다.</li>\n<li>깃 태그가 없는 경우 깃 태그를 작성합니다.</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>깃 태그가 작성되면 초안 상태의 깃허브 릴리즈를 작성합니다.</li>\n<li>깃허브 릴리즈를 공개(게시)하면, 비주얼 스튜디오 마켓플레이스에 새 버전을 게시합니다.</li>\n</ol>\n<h2>마침</h2>\n<p>비주얼 스튜디오 코드 확장에 관심이 있으시면 <a href=\"/2022/10/24/let-create-own-vscode-extension\">Let create own vscode extension</a> 페이지도 둘러보세요.</p>","frontmatter":{"title":"New CS File - vscode extension","date":"2022-10-24","description":null,"categories":["computing","repository"],"tags":["dotnet","csharp","github","github-repository","vscode","vscode-extensions"],"github":{"owner":"bbonkr","repo":"vscode-extensions-new-cs-file"},"featuredImage":null,"draft":null,"comments":null}},"previous":{"fields":{"slug":"/2022/10/24/let-create-own-vscode-extension/"},"frontmatter":{"title":"Let create own vscode extension","draft":null,"comments":false,"featuredImage":null}},"next":{"fields":{"slug":"/2022/12/31/review-2022/"},"frontmatter":{"title":"Review 2022","draft":null,"comments":null,"featuredImage":null}}},"pageContext":{"id":"a07e25e8-fa9b-5597-949e-f687c9b3269b","previousPostId":"8abb9684-2203-5979-a441-9019006e77bb","nextPostId":"9099a34b-0bd5-597b-8eff-6b7f3ec24782"}},"staticQueryHashes":["2644450635","3199328057"],"slicesMap":{}}