{"version":3,"file":"component---src-pages-index-tsx-f16ece58a04769ee3ade.js","mappings":"4KASaA,EAAe,SAAC,GAIJ,IAHrBC,EAGqB,EAHrBA,WACAC,EAEqB,EAFrBA,iBACAC,EACqB,EADrBA,SAQA,OACI,sBAAIC,UAAU,uDACTH,MAAAA,OADL,EACKA,EAAYI,KAAI,SAACC,GAAD,OACb,sBACIC,IAAKD,EAASE,WACdJ,UAAS,2DACLF,IAAqBI,EAASE,WACxB,iDACA,IAEVC,SAhBQC,EAgBgBJ,EAASE,WAhBT,WAChCL,GACAA,EAASO,MAgBAJ,EAASE,WATd,KAS4BF,EAASK,WATrC,KATW,IAACD,O,6BCNfE,EAAqB,SAAC,GAA4C,IAA1CX,EAA0C,EAA1CA,WACjC,OACI,sBAAIG,UAAU,oDACTH,MAAAA,OADL,EACKA,EAAYI,KAAI,SAACC,GACd,OACI,sBAAIC,IAAKD,GACL,gBAAC,EAAAO,KAAD,CACIC,GAAE,eAAiBC,GAAAA,CAAUT,GAC7BF,UAAU,oEAETE,U,iECyC7B,IA/CqB,SAAC,GAAgC,MAA9BU,EAA8B,EAA9BA,KACpB,OACI,2BACIZ,UAAU,sBACVa,WAAS,EACTC,SAAS,6BAET,0BAAQd,UAAU,QACd,6BACKY,EAAKG,KAAKC,YAAYnB,YACnB,gBAAC,IAAD,CACIA,WAAYe,EAAKG,KAAKC,YAAYnB,cAI9C,sBAAIG,UAAU,8FACV,gBAAC,EAAAS,KAAD,CAAMC,GAAIE,EAAKG,KAAKE,OAAOC,KAAMC,SAAS,OACtC,wBAAMA,SAAS,YACVP,EAAKG,KAAKC,YAAYI,SAInC,yBAAOpB,UAAU,qEACZY,EAAKG,KAAKC,YAAYK,OAG/B,2BAASrB,UAAU,iCACf,qBACIsB,wBAAyB,CACrBC,OAAM,UACDX,EAAKG,KAAKC,YAAYQ,aACnBZ,EAAKG,KAAKU,eAFZ,QAGF,IAERN,SAAS,iBAIjB,8BACI,yBAAOnB,UAAU,oDACb,gBAAC,KAAD,CAAe0B,KAAMd,EAAKG,KAAKC,YAAYU,Y,wECX/D,UAlCiB,SAAC,GAAyC,MAAvCC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,SAChBC,GAAY,UAAAF,EAAKG,KAAKC,oBAAV,eAAwBX,QAAxB,QACZY,EAAQL,EAAKM,kBAAkBC,MAErC,OAAIF,GAA0B,IAAjBA,EAAMG,OAEX,gBAAC,IAAD,CAAQP,SAAUA,EAAUR,MAAOS,GAC/B,gBAAC,IAAD,CAAKT,MAAM,cAEX,uLAUR,gBAAC,IAAD,CAAQQ,SAAUA,EAAUR,MAAOS,GAC/B,gBAAC,IAAD,CAAKT,MAAM,iBACX,sBAAIpB,UAAU,mBACTgC,MAAAA,OADL,EACKA,EAAO/B,KAAI,SAACW,GACT,OACI,sBAAIT,IAAKS,EAAKG,KAAKE,OAAOC,MACtB,gBAAC,IAAD,CAAcN,KAAMA","sources":["webpack://bbon.me/./src/components/categories/category-list.tsx","webpack://bbon.me/./src/components/categories/simple-category-list.tsx","webpack://bbon.me/./src/components/post-list-item.tsx","webpack://bbon.me/./src/pages/index.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Tag } from '../../models/data';\n\ninterface CategoryListProps {\n    categories?: Tag[];\n    selectedCategory?: string;\n    onChange?: (category: string) => void;\n}\n\nexport const CategoryList = ({\n    categories,\n    selectedCategory,\n    onChange,\n}: CategoryListProps) => {\n    const handleClickTag = (tag: string) => () => {\n        if (onChange) {\n            onChange(tag);\n        }\n    };\n\n    return (\n        <ul className=\"flex flex-row flex-wrap break-words gap-3 px-4 py-3\">\n            {categories?.map((category) => (\n                <li\n                    key={category.fieldValue}\n                    className={`cursor-pointer text-green-600 dark:text-green-600  p-2 ${\n                        selectedCategory === category.fieldValue\n                            ? 'cursor-not-allowed border-green-600 border-b-2'\n                            : ''\n                    }`}\n                    onClick={handleClickTag(category.fieldValue)}\n                >\n                    {category.fieldValue} ({category.totalCount})\n                </li>\n            ))}\n        </ul>\n    );\n};\n","import { Link } from 'gatsby';\nimport * as React from 'react';\nimport kebabCase from 'lodash/kebabCase';\n\ninterface SimpleCategoryListProps {\n    categories?: string[];\n}\n\nexport const SimpleCategoryList = ({ categories }: SimpleCategoryListProps) => {\n    return (\n        <ul className=\"list-style-none flex gap-3 flex-wrap break-words\">\n            {categories?.map((category) => {\n                return (\n                    <li key={category}>\n                        <Link\n                            to={`/categories/${kebabCase(category)}`}\n                            className=\"text-base md:text-sm text-green-500 no-underline hover:underline\"\n                        >\n                            {category}\n                        </Link>\n                    </li>\n                );\n            })}\n        </ul>\n    );\n};\n","import { Link } from 'gatsby';\nimport * as React from 'react';\nimport { Post } from '../models/data';\nimport { SimpleTagList } from './tags';\nimport { SimpleCategoryList } from './categories';\n\nimport '../components/tags/tag-list.css';\n\ninterface PostListItemProps {\n    post: Post;\n}\n\nconst PostListItem = ({ post }: PostListItemProps) => {\n    return (\n        <article\n            className=\"post-list-item py-6\"\n            itemScope\n            itemType=\"http://schema.org/Article\"\n        >\n            <header className=\"pt-6\">\n                <aside>\n                    {post.node.frontmatter.categories && (\n                        <SimpleCategoryList\n                            categories={post.node.frontmatter.categories}\n                        />\n                    )}\n                </aside>\n                <h2 className=\"font-bold font-sans break-words text-gray-900 dark:text-gray-100 pb-2 text-3xl md:text-4xl\">\n                    <Link to={post.node.fields.slug} itemProp=\"url\">\n                        <span itemProp=\"headline\">\n                            {post.node.frontmatter.title}\n                        </span>\n                    </Link>\n                </h2>\n                <small className=\"text-sm md:text-base font-normal text-gray-600 dark:text-gray-400\">\n                    {post.node.frontmatter.date}\n                </small>\n            </header>\n            <section className=\"article-body mt-1 break-words\">\n                <p\n                    dangerouslySetInnerHTML={{\n                        __html:\n                            (post.node.frontmatter.description ||\n                                post.node.excerpt) ??\n                            '',\n                    }}\n                    itemProp=\"description\"\n                />\n            </section>\n\n            <footer>\n                <aside className=\"text-base md:text-sm text-gray-500 flex flex-row\">\n                    <SimpleTagList tags={post.node.frontmatter.tags} />\n                </aside>\n            </footer>\n        </article>\n    );\n};\n\nexport default PostListItem;\n","import * as React from 'react';\nimport { graphql, PageProps } from 'gatsby';\nimport Layout from '../components/layout';\nimport Seo from '../components/seo';\nimport { Posts } from '../models/data';\nimport PostListItem from '../components/post-list-item';\n\nconst HomePage = ({ data, location }: PageProps<Posts>) => {\n    const siteTitle = data.site.siteMetadata?.title || `Title`;\n    const posts = data.allMarkdownRemark.edges;\n\n    if (posts && posts.length === 0) {\n        return (\n            <Layout location={location} title={siteTitle}>\n                <Seo title=\"All posts\" />\n\n                <p>\n                    No blog posts found. Add markdown posts to \"content/blog\"\n                    (or the directory you specified for the\n                    \"gatsby-source-filesystem\" plugin in gatsby-config.js).\n                </p>\n            </Layout>\n        );\n    }\n\n    return (\n        <Layout location={location} title={siteTitle}>\n            <Seo title=\"Recent posts\" />\n            <ol className=\"list-style-none\">\n                {posts?.map((post) => {\n                    return (\n                        <li key={post.node.fields.slug}>\n                            <PostListItem post={post} />\n                        </li>\n                    );\n                })}\n            </ol>\n        </Layout>\n    );\n};\n\nexport default HomePage;\n\nexport const pageQuery = graphql`\n    query {\n        site {\n            siteMetadata {\n                title\n            }\n        }\n        allMarkdownRemark(\n            limit: 6\n            sort: { fields: [frontmatter___date], order: DESC }\n        ) {\n            edges {\n                node {\n                    excerpt\n                    fields {\n                        slug\n                    }\n                    frontmatter {\n                        date(formatString: \"MMMM DD, YYYY\")\n                        title\n                        description\n                        tags\n                        categories\n                        featuredImage {\n                            childImageSharp {\n                                gatsbyImageData(layout: FIXED)\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n`;\n"],"names":["CategoryList","categories","selectedCategory","onChange","className","map","category","key","fieldValue","onClick","tag","totalCount","SimpleCategoryList","Link","to","kebabCase","post","itemScope","itemType","node","frontmatter","fields","slug","itemProp","title","date","dangerouslySetInnerHTML","__html","description","excerpt","tags","data","location","siteTitle","site","siteMetadata","posts","allMarkdownRemark","edges","length"],"sourceRoot":""}