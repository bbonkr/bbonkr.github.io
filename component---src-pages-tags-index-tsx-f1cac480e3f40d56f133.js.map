{"version":3,"file":"component---src-pages-tags-index-tsx-f1cac480e3f40d56f133.js","mappings":"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","sources":["webpack://bbon.me/./src/components/social-links/index.tsx","webpack://bbon.me/./src/components/bio.tsx","webpack://bbon.me/./src/hooks/queries/useSiteQuery.ts","webpack://bbon.me/./src/components/tags/tag-list.tsx","webpack://bbon.me/./src/components/tags/simple-tag-list.tsx","webpack://bbon.me/./src/pages/tags/index.tsx"],"sourcesContent":["import * as React from 'react';\nimport { FaFacebook, FaGithub, FaLinkedin, FaTwitter } from 'react-icons/fa';\nimport { Social } from '../../models/data';\n\nimport './style.css';\n\ninterface SocialLinksProps {\n    social: Social;\n    openNewWindow?: boolean;\n}\n\nconst SocialLinks = ({ social, openNewWindow }: SocialLinksProps) => {\n    const anchroTarget = openNewWindow ? '_blank' : '_self';\n    const anchorRel = `noreferrer ${openNewWindow ? 'external' : ''}`;\n    return (\n        <ul className=\"social-list\">\n            {social?.github && (\n                <li>\n                    <a\n                        href={`https://github.com/${social?.github || ``}`}\n                        target={anchroTarget}\n                        rel={anchorRel}\n                    >\n                        <FaGithub size={`1.3rem`} />\n                    </a>\n                </li>\n            )}\n            {social?.twitter && (\n                <li>\n                    <a\n                        href={`https://twitter.com/${social?.twitter || ``}`}\n                        target={anchroTarget}\n                        rel={anchorRel}\n                    >\n                        <FaTwitter size={'1.3rem'} />\n                    </a>\n                </li>\n            )}\n            {social?.facebook && (\n                <li>\n                    <a\n                        href={`https://www.facebook.com/${\n                            social?.facebook || ``\n                        }`}\n                        target={anchroTarget}\n                        rel={anchorRel}\n                    >\n                        <FaFacebook size={`1.3rem`} />\n                    </a>\n                </li>\n            )}\n            {social?.linkedin && (\n                <li>\n                    <a\n                        href={`https://www.linkedin.com/in/${\n                            social?.linkedin || ``\n                        }/`}\n                        target={anchroTarget}\n                        rel={anchorRel}\n                    >\n                        <FaLinkedin size={`1.3rem`} />\n                    </a>\n                </li>\n            )}\n        </ul>\n    );\n};\n\nexport default SocialLinks;\n","/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from 'react';\nimport { StaticImage } from 'gatsby-plugin-image';\nimport { FaTwitter } from 'react-icons/fa';\nimport { useSiteQuery } from '../hooks/queries/useSiteQuery';\nimport SocialLinks from './social-links';\n\nconst Bio = () => {\n    const { site } = useSiteQuery();\n\n    // Set these values by editing \"siteMetadata\" in gatsby-config.js\n    const author = site.siteMetadata?.author;\n    const social = site.siteMetadata?.social;\n\n    return (\n        <div id=\"bio\" className=\"flex w-full items-center font-sans px-4 py-12\">\n            <StaticImage\n                className=\"w-10 h-10 rounded-full mr-4\"\n                layout=\"fixed\"\n                formats={['auto', 'webp', 'avif']}\n                src=\"../images/me.png\"\n                width={50}\n                height={50}\n                quality={95}\n                alt=\"Profile picture\"\n            />\n            {author?.name && (\n                <div className=\"flex-1 px-2\">\n                    <p className=\"text-base font-bold md:text-xl leading-none mb-1\">\n                        {author.name}\n                    </p>\n                    {author?.summary && (\n                        <p className=\"text-gray-600 dark:text-gray-400 text-xs md:text-base mb-1\">\n                            {author?.summary}\n                        </p>\n                    )}\n                    {social && (\n                        <div className=\"justify-end\">\n                            <SocialLinks social={social} />\n                        </div>\n                    )}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default Bio;\n","import { useStaticQuery, graphql } from 'gatsby';\nimport { Site } from '../../models/data';\n\nexport const useSiteQuery = () => {\n    const data = useStaticQuery<{ site: Site }>(graphql`\n        query BioQuery {\n            site {\n                siteMetadata {\n                    title\n                    author {\n                        name\n                        summary\n                    }\n                    social {\n                        twitter\n                        github\n                        linkedin\n                        facebook\n                    }\n                }\n            }\n        }\n    `);\n\n    return {\n        ...data,\n    };\n};\n","import * as React from 'react';\nimport { Tag } from '../../models/data';\n\n// import './tag-list.css';\n\ninterface TagListProps {\n    tags: Tag[];\n    selectedTag?: string;\n    onChange?: (tag: string) => void;\n}\n\nexport const TagList = ({ tags, selectedTag, onChange }: TagListProps) => {\n    const handleClickTag = (tag: string) => () => {\n        if (onChange) {\n            onChange(tag);\n        }\n    };\n\n    return (\n        <ul className=\"flex flex-row flex-wrap break-words gap-3 px-4 py-3\">\n            {tags.map((tag) => (\n                <li\n                    key={tag.fieldValue}\n                    className={`cursor-pointer text-green-600 dark:text-green-600  p-2 ${\n                        selectedTag === tag.fieldValue\n                            ? 'cursor-not-allowed border-green-600 border-b-2'\n                            : ''\n                    }`}\n                    onClick={handleClickTag(tag.fieldValue)}\n                >\n                    {`#`}\n                    {tag.fieldValue} ({tag.totalCount})\n                </li>\n            ))}\n        </ul>\n    );\n};\n","import * as React from 'react';\nimport { Link } from 'gatsby';\nimport kebabCase from 'lodash/kebabCase';\n\ninterface SimpleTagListProps {\n    tags?: string[];\n}\n\nexport const SimpleTagList = ({ tags }: SimpleTagListProps) => {\n    return (\n        <ul className=\"list-style-none flex gap-3 flex-wrap break-words\">\n            {tags\n                ?.filter((tag, index, arr) => {\n                    // If there is duplicated tag, it should not render.\n                    return (\n                        arr.findIndex(\n                            (x) => x.toLowerCase() === tag.toLowerCase()\n                        ) === index\n                    );\n                })\n                .map((tag) => {\n                    return (\n                        <li key={tag}>\n                            <Link\n                                to={`/tags/${kebabCase(tag)}`}\n                                className=\"text-base md:text-sm text-green-500 no-underline hover:underline\"\n                            >\n                                {`#${tag}`}\n                            </Link>\n                        </li>\n                    );\n                })}\n        </ul>\n    );\n};\n","import * as React from 'react';\nimport kebabCase from 'lodash/kebabCase';\nimport { graphql, PageProps, navigate } from 'gatsby';\nimport Layout from '../../components/layout';\nimport Seo from '../../components/seo';\nimport Bio from '../../components/bio';\nimport { Tag } from '../../models/data';\nimport { TagList } from '../../components/tags';\n\ninterface FormValues {\n    tag?: string;\n}\n\ninterface FormState {\n    values?: FormValues;\n}\n\ninterface SiteMetadata {\n    title: string;\n}\n\ninterface Site {\n    siteMetadata: SiteMetadata;\n}\n\ninterface MarkdownRemark {\n    group: Tag[];\n}\n\ninterface Data {\n    allMarkdownRemark: MarkdownRemark;\n    site: Site;\n}\n\nconst TagsPage = ({ location, data }: PageProps<Data>) => {\n    const [formState, setFormState] = React.useState<FormState>({ values: {} });\n    const {\n        allMarkdownRemark: { group },\n        site: {\n            siteMetadata: { title },\n        },\n    } = data;\n\n    const handleClickTag = (tag: string) => {\n        navigate(`/tags/${kebabCase(tag)}`);\n    };\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const value = event.target.value;\n        const name = event.target.name;\n\n        setFormState((prevState) => ({\n            ...(prevState ?? {}),\n            values: {\n                ...(prevState ?? {}).values,\n                [name]: value,\n            },\n        }));\n    };\n\n    // React.useEffect(() => {\n    //     console.info('formState', formState);\n    // }, []);\n\n    return (\n        <Layout location={location} title={title}>\n            <Seo title=\"All tags\" />\n            <Bio />\n            <header>\n                <h1>Tags</h1>\n            </header>\n            <main>\n                <div className=\"w-full\">\n                    <label className=\"block\">\n                        <input\n                            type=\"text\"\n                            name=\"tag\"\n                            className=\"mt-1 block w-full rounded-md shadow-sm border-green-600 focus:border-green-300 focus:ring focus:ring-green-200 focus:ring-opacity-50 dark:bg-gray-800\"\n                            onChange={handleChange}\n                            value={formState.values?.tag ?? ''}\n                            placeholder=\"Filter\"\n                        />\n                    </label>\n                </div>\n\n                <TagList\n                    tags={group.filter((x) =>\n                        !formState.values || !formState.values?.tag\n                            ? true\n                            : formState.values?.tag\n                            ? x.fieldValue\n                                  .toLowerCase()\n                                  .startsWith(\n                                      formState.values?.tag?.toLowerCase()\n                                  )\n                            : false\n                    )}\n                    onChange={handleClickTag}\n                />\n            </main>\n        </Layout>\n    );\n};\n\nexport default TagsPage;\n\nexport const pageQuery = graphql`\n    query {\n        site {\n            siteMetadata {\n                title\n            }\n        }\n        allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n            group(field: frontmatter___tags) {\n                fieldValue\n                totalCount\n                edges {\n                    node {\n                        excerpt(format: PLAIN)\n                        fields {\n                            slug\n                        }\n                        frontmatter {\n                            date(formatString: \"MMMM DD, YYYY\")\n                            title\n                            tags\n                            categories\n                        }\n                    }\n                }\n            }\n        }\n    }\n`;\n"],"names":["social","openNewWindow","anchroTarget","anchorRel","className","github","href","target","rel","size","twitter","facebook","linkedin","data","site","useStaticQuery","author","siteMetadata","id","S","layout","formats","src","width","height","quality","alt","name","summary","TagList","tags","selectedTag","onChange","handleClickTag","tag","map","key","fieldValue","onClick","totalCount","SimpleTagList","filter","index","arr","findIndex","x","toLowerCase","Link","to","kebabCase","location","React","values","formState","setFormState","group","allMarkdownRemark","title","type","event","value","prevState","placeholder","startsWith","navigate"],"sourceRoot":""}