{"version":3,"file":"component---src-pages-search-tsx-2ce5e73fd85f878c2a22.js","mappings":"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","sources":["webpack://bbon.me/./src/components/categories/category-list.tsx","webpack://bbon.me/./src/components/categories/simple-category-list.tsx","webpack://bbon.me/./src/components/post-list-item.tsx","webpack://bbon.me/./src/pages/search.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Tag } from '../../models/data';\n\ninterface CategoryListProps {\n    categories?: Tag[];\n    selectedCategory?: string;\n    onChange?: (category: string) => void;\n}\n\nexport const CategoryList = ({\n    categories,\n    selectedCategory,\n    onChange,\n}: CategoryListProps) => {\n    const handleClickTag = (tag: string) => () => {\n        if (onChange) {\n            onChange(tag);\n        }\n    };\n\n    return (\n        <ul className=\"flex flex-row flex-wrap break-words gap-3 px-4 py-3\">\n            {categories?.map((category) => (\n                <li\n                    key={category.fieldValue}\n                    className={`cursor-pointer text-green-600 dark:text-green-600  p-2 ${\n                        selectedCategory === category.fieldValue\n                            ? 'cursor-not-allowed border-green-600 border-b-2'\n                            : ''\n                    }`}\n                    onClick={handleClickTag(category.fieldValue)}\n                >\n                    {category.fieldValue} ({category.totalCount})\n                </li>\n            ))}\n        </ul>\n    );\n};\n","import { Link } from 'gatsby';\nimport * as React from 'react';\nimport kebabCase from 'lodash/kebabCase';\n\ninterface SimpleCategoryListProps {\n    categories?: string[];\n}\n\nexport const SimpleCategoryList = ({ categories }: SimpleCategoryListProps) => {\n    return (\n        <ul className=\"list-style-none flex gap-3 flex-wrap break-words\">\n            {categories?.map((category) => {\n                return (\n                    <li key={category}>\n                        <Link\n                            to={`/categories/${kebabCase(category)}`}\n                            className=\"text-base md:text-sm text-green-500 no-underline hover:underline\"\n                        >\n                            {category}\n                        </Link>\n                    </li>\n                );\n            })}\n        </ul>\n    );\n};\n","import { Link } from 'gatsby';\nimport * as React from 'react';\nimport { Post } from '../models/data';\nimport { SimpleTagList } from './tags';\nimport { SimpleCategoryList } from './categories';\n\nimport '../components/tags/tag-list.css';\n\ninterface PostListItemProps {\n    post: Post;\n}\n\nconst PostListItem = ({ post }: PostListItemProps) => {\n    return (\n        <article\n            className=\"post-list-item py-6\"\n            itemScope\n            itemType=\"http://schema.org/Article\"\n        >\n            <header className=\"pt-6\">\n                <aside>\n                    {post.node.frontmatter.categories && (\n                        <SimpleCategoryList\n                            categories={post.node.frontmatter.categories}\n                        />\n                    )}\n                </aside>\n                <h2 className=\"font-bold font-sans break-words text-gray-900 dark:text-gray-100 pb-2 text-3xl md:text-4xl\">\n                    <Link to={post.node.fields.slug} itemProp=\"url\">\n                        <span itemProp=\"headline\">\n                            {post.node.frontmatter.title}\n                        </span>\n                    </Link>\n                </h2>\n                <small className=\"text-sm md:text-base font-normal text-gray-600 dark:text-gray-400\">\n                    {post.node.frontmatter.date.toLocaleString()}\n                </small>\n            </header>\n            <section className=\"article-body mt-1 break-words\">\n                <p\n                    dangerouslySetInnerHTML={{\n                        __html:\n                            (post.node.frontmatter.description ||\n                                post.node.excerpt) ??\n                            '',\n                    }}\n                    itemProp=\"description\"\n                />\n            </section>\n\n            <footer>\n                <aside className=\"text-base md:text-sm text-gray-500 flex flex-row\">\n                    <SimpleTagList tags={post.node.frontmatter.tags} />\n                </aside>\n            </footer>\n        </article>\n    );\n};\n\nexport default PostListItem;\n","import * as React from 'react';\nimport { graphql, PageProps } from 'gatsby';\nimport Layout from '../components/layout';\nimport Seo from '../components/seo';\nimport { Posts } from '../models/data';\nimport PostListItem from '../components/post-list-item';\n\ninterface FormValues {\n    keyword?: string;\n}\n\ninterface FormState {\n    values?: FormValues;\n}\n\nconst SearchPage = ({ data, location }: PageProps<Posts>) => {\n    const [formState, setFormState] = React.useState<FormState>({});\n\n    const siteTitle = data.site.siteMetadata?.title || `Title`;\n    const posts = data.allMarkdownRemark.edges;\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const value = event.target.value;\n        const name = event.target.name;\n\n        setFormState((prevState) => ({\n            ...(prevState ?? {}),\n            values: {\n                ...(prevState ?? {}).values,\n                [name]: value,\n            },\n        }));\n    };\n\n    const filteredPosts = React.useMemo(() => {\n        return (posts ?? []).filter((x) => {\n            if (!formState?.values?.keyword) {\n                return false;\n            }\n\n            const regex = new RegExp(`.*${formState.values.keyword}.*`, 'gi');\n            if (x.node.rawMarkdownBody && regex.test(x.node.rawMarkdownBody)) {\n                return true;\n            }\n\n            if (\n                x.node.frontmatter.title &&\n                regex.test(x.node.frontmatter.title)\n            ) {\n                return true;\n            }\n\n            return false;\n        });\n    }, [formState.values]);\n\n    if (posts && posts.length === 0) {\n        return (\n            <Layout location={location} title={siteTitle}>\n                <Seo title=\"All posts\" />\n\n                <p>\n                    No blog posts found. Add markdown posts to \"content/blog\"\n                    (or the directory you specified for the\n                    \"gatsby-source-filesystem\" plugin in gatsby-config.js).\n                </p>\n            </Layout>\n        );\n    }\n\n    return (\n        <Layout location={location} title={siteTitle}>\n            <Seo title=\"Search\" />\n\n            <header>\n                <h1>Search</h1>\n            </header>\n            <main>\n                <div className=\"w-full\">\n                    <label className=\"block\">\n                        <input\n                            type=\"text\"\n                            name=\"keyword\"\n                            className=\"mt-1 block w-full rounded-md shadow-sm border-green-600 focus:border-green-300 focus:ring focus:ring-green-200 focus:ring-opacity-50 dark:bg-gray-800\"\n                            onChange={handleChange}\n                            value={formState.values?.keyword ?? ''}\n                            placeholder=\"Keyword\"\n                        />\n                    </label>\n                </div>\n\n                <div className=\"flex flex-col justify-center items-center\">\n                    {filteredPosts.length > 0 ? (\n                        <React.Fragment>\n                            <p className=\"py-4 self-start\">{`Found ${\n                                filteredPosts.length\n                            } post${filteredPosts.length > 1 ? 's' : ''}`}</p>\n\n                            <ol className=\"list-style-none\">\n                                {filteredPosts.map((post) => {\n                                    return (\n                                        <li key={post.node.fields.slug}>\n                                            <PostListItem post={post} />\n                                        </li>\n                                    );\n                                })}\n                            </ol>\n                        </React.Fragment>\n                    ) : formState.values?.keyword ? (\n                        <p className=\"py-4\">\n                            Does not find post about {formState.values?.keyword}\n                        </p>\n                    ) : (\n                        <p></p>\n                    )}\n                </div>\n            </main>\n        </Layout>\n    );\n};\n\nexport const pageQuery = graphql`\n    query {\n        site {\n            siteMetadata {\n                title\n            }\n        }\n        allMarkdownRemark(\n            limit: 2000\n            sort: { fields: [frontmatter___date], order: DESC }\n        ) {\n            edges {\n                node {\n                    excerpt\n                    fields {\n                        slug\n                    }\n                    frontmatter {\n                        date(formatString: \"MMMM DD, YYYY\")\n                        title\n                        description\n                        tags\n                        categories\n                        featuredImage {\n                            childImageSharp {\n                                gatsbyImageData(layout: FIXED)\n                            }\n                        }\n                    }\n                    rawMarkdownBody\n                }\n            }\n        }\n    }\n`;\n\nexport default SearchPage;\n"],"names":["CategoryList","categories","selectedCategory","onChange","React","className","map","category","key","fieldValue","onClick","tag","totalCount","SimpleCategoryList","Link","to","kebabCase","post","itemScope","itemType","node","frontmatter","fields","slug","itemProp","title","date","toLocaleString","dangerouslySetInnerHTML","__html","description","excerpt","SimpleTagList","tags","data","location","formState","setFormState","siteTitle","site","siteMetadata","_data$site$siteMetada","posts","allMarkdownRemark","edges","filteredPosts","filter","x","values","_formState$values","keyword","regex","RegExp","rawMarkdownBody","test","length","Layout","Seo","type","name","event","value","target","prevState","_formState$values2","placeholder","PostListItem","_formState$values3","_formState$values4"],"sourceRoot":""}