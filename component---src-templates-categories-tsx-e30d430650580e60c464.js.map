{"version":3,"file":"component---src-templates-categories-tsx-e30d430650580e60c464.js","mappings":"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","sources":["webpack://bbon.me/./src/components/categories/category-list.tsx","webpack://bbon.me/./src/components/categories/simple-category-list.tsx","webpack://bbon.me/./src/components/hr.tsx","webpack://bbon.me/./src/components/pagination/page-nav.tsx","webpack://bbon.me/./src/components/post-list-item.tsx","webpack://bbon.me/./src/templates/categories.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Tag } from '../../models/data';\n\ninterface CategoryListProps {\n    categories?: Tag[];\n    selectedCategory?: string;\n    onChange?: (category: string) => void;\n}\n\nexport const CategoryList = ({\n    categories,\n    selectedCategory,\n    onChange,\n}: CategoryListProps) => {\n    const handleClickTag = (tag: string) => () => {\n        if (onChange) {\n            onChange(tag);\n        }\n    };\n\n    return (\n        <ul className=\"flex flex-row flex-wrap break-words gap-3 px-4 py-3\">\n            {categories?.map((category) => (\n                <li\n                    key={category.fieldValue}\n                    className={`cursor-pointer text-green-600 dark:text-green-600  p-2 ${\n                        selectedCategory === category.fieldValue\n                            ? 'cursor-not-allowed border-green-600 border-b-2'\n                            : ''\n                    }`}\n                    onClick={handleClickTag(category.fieldValue)}\n                >\n                    {category.fieldValue} ({category.totalCount})\n                </li>\n            ))}\n        </ul>\n    );\n};\n","import { Link } from 'gatsby';\nimport * as React from 'react';\nimport kebabCase from 'lodash/kebabCase';\n\ninterface SimpleCategoryListProps {\n    categories?: string[];\n}\n\nexport const SimpleCategoryList = ({ categories }: SimpleCategoryListProps) => {\n    return (\n        <ul className=\"list-style-none flex gap-3 flex-wrap break-words\">\n            {categories?.map((category) => {\n                return (\n                    <li key={category}>\n                        <Link\n                            to={`/categories/${kebabCase(category)}`}\n                            className=\"text-base md:text-sm text-green-500 no-underline hover:underline\"\n                        >\n                            {category}\n                        </Link>\n                    </li>\n                );\n            })}\n        </ul>\n    );\n};\n","import * as React from 'react';\n\nexport const Hr = () => {\n    return <hr className=\"border-b-2 border-gray-400 my-8\" />;\n};\n","import * as React from 'react';\nimport { Link, navigate } from 'gatsby';\n\ninterface PageNavProp {\n    showDescription?: boolean;\n    useShortcut?: boolean;\n    current: number;\n    total: number;\n    path: string;\n}\n\nexport const PageNav = ({\n    current,\n    total,\n    path,\n    showDescription,\n    useShortcut,\n}: PageNavProp) => {\n    const [selectedPage, setSelectedPage] = React.useState<string>(\n        `${current}`\n    );\n\n    const handleChange = (\n        event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>\n    ) => {\n        const value = event.target.value;\n\n        setSelectedPage((_) => value);\n    };\n\n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n\n        if (selectedPage && selectedPage !== `${current}`) {\n            navigate(\n                `${path}${selectedPage === '1' ? '' : `/${selectedPage}`}`\n            );\n        }\n    };\n\n    return (\n        <nav>\n            <div className=\"font-sans container max-w-4xl mx-auto flex flex-col justify-center items-center\">\n                <div className=\"w-full mx-auto flex flex-wrap\">\n                    <div className=\"flex-start text-left md:w-1/2 flex-1\">\n                        {current > 1 && (\n                            <React.Fragment>\n                                <span className=\"text-xs md:text-sm font-normal text-gray-600\">\n                                    &lt; Previous Page\n                                </span>\n\n                                <Link\n                                    to={`${path}${\n                                        current - 1 < 2 ? '' : `/${current - 1}`\n                                    }`}\n                                    rel=\"prev\"\n                                    className=\"break-normal text-base md:text-sm text-green-500 font-bold no-underline hover:underline\"\n                                >\n                                    <br />\n                                    {`Previous Page`}\n                                </Link>\n                            </React.Fragment>\n                        )}\n                    </div>\n                    <div className=\"flex-end text-right md:w-1/2 flex-1\">\n                        {current < total && (\n                            <React.Fragment>\n                                <span className=\"text-xs md:text-sm font-normal text-gray-600\">\n                                    Next Page &gt;\n                                </span>\n                                <br />\n                                <Link\n                                    to={`${path}/${current + 1}`}\n                                    rel=\"next\"\n                                    className=\"break-normal text-base md:text-sm text-green-500 font-bold no-underline hover:underline\"\n                                >\n                                    {`Next Page`}\n                                </Link>\n                            </React.Fragment>\n                        )}\n                    </div>\n                </div>\n\n                <div className=\"flex-1 flex justify-center items-center w-full gap-3 my-6 flex-wrap\">\n                    {showDescription && (\n                        <div className=\"\">\n                            <h2 className=\"flex gap-2 text-sm\">\n                                <span>{`Posts on`}</span>\n                                <span className=\"text-green-500\">{`${current}`}</span>\n                                <span>of</span>\n                                <span>{`${total} page${\n                                    total > 1 ? 's' : ''\n                                }`}</span>\n                            </h2>\n                        </div>\n                    )}\n                    {useShortcut && (\n                        <form onSubmit={handleSubmit} className=\"flex gap-1\">\n                            <select\n                                className=\"rounded-md shadow-sm border-green-600 focus:border-green-300 focus:ring focus:ring-green-200 focus:ring-opacity-50\"\n                                onChange={handleChange}\n                                value={selectedPage}\n                            >\n                                {Array.from({ length: total }).map(\n                                    (_, index) => (\n                                        <option\n                                            key={index + 1}\n                                            value={index + 1}\n                                        >\n                                            {index + 1}\n                                        </option>\n                                    )\n                                )}\n                            </select>\n                            <button\n                                type=\"submit\"\n                                className=\"button bg-green-600 text-gray-100 focus:ring focus:ring-green-200 focus:ring-opacity-50\"\n                            >\n                                Go\n                            </button>\n                        </form>\n                    )}\n                </div>\n            </div>\n        </nav>\n    );\n};\n","import { Link } from 'gatsby';\nimport * as React from 'react';\nimport { Post } from '../models/data';\nimport { SimpleTagList } from './tags';\nimport { SimpleCategoryList } from './categories';\n\nimport '../components/tags/tag-list.css';\n\ninterface PostListItemProps {\n    post: Post;\n}\n\nconst PostListItem = ({ post }: PostListItemProps) => {\n    const now = +new Date();\n    const postDate = Date.parse(`${post.node.frontmatter.date}`);\n    const tempDate = postDate + 1000 * 60 * 60 * 24 * 8;\n    const isNew = now < tempDate;\n\n    return (\n        <article\n            className=\"post-list-item py-6\"\n            itemScope\n            itemType=\"http://schema.org/Article\"\n        >\n            <header className=\"pt-6\">\n                <aside>\n                    {post.node.frontmatter.categories && (\n                        <SimpleCategoryList\n                            categories={post.node.frontmatter.categories}\n                        />\n                    )}\n                </aside>\n\n                <h2 className=\"font-bold font-sans break-words text-gray-900 dark:text-gray-100 pb-2 text-3xl md:text-4xl \">\n                    <Link to={post.node.fields.slug} itemProp=\"url\">\n                        <span itemProp=\"headline\">\n                            {post.node.frontmatter.title}\n                        </span>\n                    </Link>\n                </h2>\n\n                <div className=\"indicator pr-10\">\n                    {isNew && (\n                        <span className=\"indicator-item indicator-end indicator-middle badge badge-secondary\">\n                            NEW\n                        </span>\n                    )}\n                    <div>\n                        <small className=\"text-sm md:text-base font-normal text-gray-600 dark:text-gray-400\">\n                            {post.node.frontmatter.date.toLocaleString()}\n                        </small>\n                    </div>\n                </div>\n            </header>\n            <section className=\"article-body mt-1 break-words\">\n                <p\n                    dangerouslySetInnerHTML={{\n                        __html:\n                            (post.node.frontmatter.description ||\n                                post.node.excerpt) ??\n                            '',\n                    }}\n                    itemProp=\"description\"\n                />\n            </section>\n\n            <footer>\n                <aside className=\"text-base md:text-sm text-gray-500 flex flex-row\">\n                    <SimpleTagList tags={post.node.frontmatter.tags} />\n                </aside>\n            </footer>\n        </article>\n    );\n};\n\nexport default PostListItem;\n","import * as React from 'react';\nimport { graphql, Link, PageProps } from 'gatsby';\nimport Layout from '../components/layout';\nimport Seo from '../components/seo';\nimport { Edge, Post } from '../models/data';\nimport PostListItem from '../components/post-list-item';\nimport { Hr } from '../components/hr';\nimport { PageNav } from '../components/pagination/page-nav';\n\ninterface PageContext {\n    category: string;\n    limit: number;\n    skip: number;\n    totalPages: number;\n    currentPage: number;\n    basePath: string;\n}\n\ninterface SiteMetadata {\n    title: string;\n}\n\ninterface Site {\n    siteMetadata: SiteMetadata;\n}\n\ninterface Category {\n    fieldValue: string;\n    totalCount: number;\n    edges: Post[];\n}\n\ninterface MarkdownRemark {\n    // group: Category[];\n    edges: Edge[];\n}\n\ninterface Data {\n    allMarkdownRemark: MarkdownRemark;\n    site: Site;\n}\n\nconst CategoryPageTemplate = ({\n    location,\n    data,\n    pageContext,\n}: PageProps<Data, PageContext>) => {\n    const {\n        allMarkdownRemark: { edges },\n        site: {\n            siteMetadata: { title },\n        },\n    } = data;\n\n    return (\n        <Layout location={location} title={title}>\n            <Seo title={`Posts categorized by ${pageContext.category}`} />\n\n            <section className=\"py-6\">\n                <header>\n                    <aside>\n                        <p className=\"text-base md:text-sm text-green-500 font-bold\">\n                            &lt;{' '}\n                            <Link\n                                to=\"/categories\"\n                                className=\"text-base md:text-sm text-green-500 font-bold no-underline hover:underline\"\n                            >\n                                BACK TO CATEGORIES\n                            </Link>\n                        </p>\n                    </aside>\n                    <h1>\n                        {`Posts categorized by`}{' '}\n                        <span className=\"text-green-500\">{`${pageContext.category}`}</span>{' '}\n                    </h1>\n                </header>\n\n                <main>\n                    {edges.map((edge) => {\n                        return (\n                            <PostListItem\n                                key={edge.node.fields.slug}\n                                post={edge}\n                            />\n                        );\n                    })}\n                </main>\n                <Hr />\n\n                <footer>\n                    <PageNav\n                        current={pageContext.currentPage}\n                        total={pageContext.totalPages}\n                        path={pageContext.basePath}\n                        showDescription\n                        useShortcut\n                    />\n                </footer>\n            </section>\n        </Layout>\n    );\n};\n\nexport const pageQuery = graphql`\n    query postsByCategory($category: String, $skip: Int!, $limit: Int!) {\n        site {\n            siteMetadata {\n                title\n            }\n        }\n        allMarkdownRemark(\n            sort: { frontmatter: { date: DESC } }\n            filter: { frontmatter: { categories: { in: [$category] } } }\n            limit: $limit\n            skip: $skip\n        ) {\n            edges {\n                node {\n                    excerpt(format: PLAIN)\n                    fields {\n                        slug\n                    }\n                    frontmatter {\n                        date(formatString: \"YYYY-MM-DD\")\n                        title\n                        tags\n                        categories\n                        featuredImage {\n                            childImageSharp {\n                                gatsbyImageData(layout: FIXED)\n                            }\n                        }\n                        draft\n                        comments\n                    }\n                }\n            }\n        }\n    }\n`;\n\nexport default CategoryPageTemplate;\n"],"names":["CategoryList","_ref","categories","selectedCategory","onChange","React","className","map","category","key","fieldValue","onClick","tag","totalCount","SimpleCategoryList","Link","to","kebabCase","Hr","PageNav","current","total","path","showDescription","useShortcut","selectedPage","setSelectedPage","rel","onSubmit","event","preventDefault","navigate","value","target","_","Array","from","length","index","type","post","isNew","Date","parse","node","frontmatter","date","itemScope","itemType","fields","slug","itemProp","title","toLocaleString","dangerouslySetInnerHTML","__html","description","excerpt","SimpleTagList","tags","location","data","pageContext","allMarkdownRemark","edges","site","siteMetadata","Layout","Seo","edge","PostListItem","currentPage","totalPages","basePath"],"sourceRoot":""}